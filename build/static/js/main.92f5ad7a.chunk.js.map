{"version":3,"sources":["utilities/config.js","utilities/helperFuncs.js","graphql/queries/sensorData.js","hooks/useAction.js","graphql/mutations/startWatering.js","components/WateringModal.js","graphql/mutations/stopWatering.js","components/MobileContainer.js","components/DesktopContainer.js","components/ResponsiveLayout.js","graphql/mutations/loginUser.js","graphql/queries/currentUser.js","hooks/useField.js","components/LoginForm.js","graphql/mutations/createUser.js","components/RegisterForm.js","hooks/useNotification.js","components/LoginView.js","components/SensorValue.js","graphql/queries/chartData.js","components/Loading.js","utilities/chartConfig.js","components/Chart.js","graphql/mutations/clearChartData.js","components/PlantSensor.js","components/HouseSensor.js","components/SensorView.js","graphql/queries/chatMessages.js","graphql/mutations/createMessage.js","graphql/subscriptions/messageAdded.js","components/ChatMessage.js","components/ChatView.js","components/InfoSection.js","components/PopupLink.js","components/AboutView.js","graphql/mutations/editUserSensorEndpoint.js","graphql/mutations/reboot.js","graphql/mutations/validateSensorEndpoint.js","components/SensorUrlForm.js","components/SettingsView.js","components/ImageError.js","components/VideoView.js","App.js","hooks/useSensors.js","index.js"],"names":["config","wsUrl","httpUrl","includedIn","set","object","map","p","id","includes","formatSensorData","sensorData","filteredArray","Object","values","reduce","acc","cur","concat","filter","sensor","model","length","Error","handleSensorEndpointUpdateForToken","sensorUrlField","setToken","currentToken","JSON","parse","localStorage","getItem","removeItem","updatedToken","objectSpread","sensorEndpoint","window","setItem","stringify","gql","_templateObject","useAction","client","useApolloClient","actionUrl","mutation","mutate","variables","startWatering","startWatering_templateObject","WateringModal","_ref","actions","wateringConnected","setPage","_useState","useState","_useState2","slicedToArray","showModal","setShowModal","fireAction","handleWatering","duration","action","error","console","message","react_default","a","createElement","Modal","centered","basic","open","onClose","trigger","Menu","Item","data-cy","onClick","disabled","Icon","name","style","textAlign","size","Header","content","icon","Actions","marginTop","Button","Group","color","water","oneMin","Or","fiveMin","tenMin","stopWatering","stopWatering_templateObject","MobileContainer","children","logOut","page","token","showSidebar","setShowSidebar","_useState3","_useState4","cameraConnected","setCameraConnected","_useState5","_useState6","setWateringConnected","handleViewChange","view","useEffect","undefined","camera","Fragment","Responsive","maxWidth","onlyMobile","as","Sidebar","Pushable","height","animation","inverted","onHide","vertical","visible","width","username","components_WateringModal","waterstop","Pusher","dimmed","widths","pointing","marginBottom","borderRadius","alignSelf","header","position","DesktopContainer","minWidth","onlyTablet","fixed","margin","ResponsiveLayout","sensorService","components_MobileContainer","components_DesktopContainer","loginUser","loginUser_templateObject","currentUser","currentUser_templateObject","useField","type","value","setValue","onChange","event","target","reset","LoginForm","setNotification","_useMutation","useMutation","login","_useField","objectWithoutProperties","_useField2","password","handleLogin","_ref2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","update","result","data","refetchQueries","query","t0","graphQLErrors","stop","apply","this","arguments","Form","onSubmit","Segment","stacked","raised","Input","assign","fluid","iconPosition","placeholder","autoComplete","createUser","createUser_templateObject","RegisterForm","setLoginVisible","register","usernameReset","nameReset","_useField3","passwordReset","handleRegister","log","useNotification","text","setText","setTimeout","LoginView","_useNotification","_useNotification2","notification","loginVisible","className","Grid","background","verticalAlign","Column","dividing","active","components_LoginForm","components_RegisterForm","Message","positive","negative","SensorValue","iconColor","fontSize","chartData","chartData_templateObject","Loading","Dimmer","Loader","returnColor","measure","options","range","chartFilter","scales","xAxes","time","unit","displayFormats","minute","hour","day","ticks","autoSkip","maxTicksLimit","maxRotation","yAxes","yAxisLeft","suggestedMin","callback","index","returnYLabel","fontColor","gridLines","drawBorder","yAxisRight","display","max","legend","Chart","chartTimeRange","plantData","useQuery","toUpperCase","fetchPolicy","loading","minHeight","components_Loading","keys","secondary","formattedChartData","labels","moment","relativeTimeThreshold","subtract","datasets","push","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxisID","formatSensorDataIntoChartData","es","redraw","clearChartData","clearChartData_templateObject","columnStyle","padding","chartFilterDef","chartFilterLight","chartFilterNutr","PlantSensor","chartVisible","setChartVisible","setChartTimeRange","measures","setMeasures","clearChartHistory","href","rel","columns","Row","soil_moisture","components_SensorValue","light_lux","ec_mS_cm","temperature_C","circular","confirm","attached","components_Chart","fromNow","battery_low","chartFilterCO2","HouseSensor","location","CO2_ppm","humidity","SensorView","show","sensorError","overflowY","components_PlantSensor","key","components_HouseSensor","chatMessages","chatMessages_templateObject","createMessage","createMessage_templateObject","messageAdded","messageAdded_templateObject","ChatMessage","me","defSegColor","user","defFloatSide","segmentStyle","float","clear","Comment","paddingTop","overflow","compact","Content","Author","Metadata","Date","parseInt","created","toLocaleString","Divider","ChatView","_useQuery","userQuery","resetMessageInput","messageInput","addMessage","el","useRef","scrollToBottom","useSubscription","onSubscriptionData","subscriptionData","messageData","readQuery","addedMessage","messages","writeQuery","toConsumableArray","current","scrollIntoView","block","behavior","handleSubmit","now","getSeconds","Container","components_ChatMessage","ref","onKeyPress","_ref3","onFocus","justifyContent","InfoSection","PopupLink","githubUrl","linkedInUrl","email","Popup","flowing","hoverable","hideOnScroll","divided","headerStyle","AboutView","paddingBottom","role","aria-label","components_PopupLink","section","List","ordered","components_InfoSection","editUserSensorEndpoint","editUserSensorEndpoint_templateObject","reboot","reboot_templateObject","validateSensorEndpoint","validateSensorEndpoint_templateObject","SensorUrlForm","sensorsConnected","resetSensorUrl","sensorUrl","editSensorEndpoint","handleConnect","sent","handleReboot","_ref4","_callee2","_context2","stopFetching","startFetching","SettingsView","components_SensorUrlForm","divStyle","alignItems","ImageError","setReloadImage","setError","VideoView","pending","setPending","displayImage","setDisplayImage","reloadImage","_useState7","_useState8","components_ImageError","Image","src","onLoad","onError","App","_useSensors","setSensorData","setActions","isConnected","setIsConnected","_useState9","_useState10","intervalId","setIntervalId","getSensorData","url","parsedSensorQuery","sensorDatas","sensors","_x","setInterval","clearInterval","useSensors","_useSensors2","components_ResponsiveLayout","resetStore","components_SensorView","components_ChatView","components_AboutView","components_SettingsView","components_VideoView","components_LoginView","wslink","WebSocketLink","uri","reconnect","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","react_common_esm","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.92f5ad7a.chunk.js","sourcesContent":["let wsUrl = 'ws://localhost:4000/graphql'\nlet httpUrl = 'http://localhost:4000/graphql'\n\nif (process.env.NODE_ENV === 'production') {\n  wsUrl = 'wss://lit-forest-54340.herokuapp.com/graphql'\n  httpUrl = 'https://lit-forest-54340.herokuapp.com/graphql'\n}\n\nexport default { wsUrl, httpUrl }","export const includedIn = (set, object) =>\n  set.map(p => p.id).includes(object.id)\n\n// Sensor data comes in three objects. they need to be merged into one array\nexport const formatSensorData = (sensorData) => {\n  const values = Object.values(sensorData)\n  \n  const flattenedArray = values.reduce((acc, cur) => cur.concat(acc))\n  // Some sensors might show empty values because they're not online yet\n  // so they need to be filtered out.\n  const filteredArray = flattenedArray.filter(sensor => sensor.model !== '')\n\n  if (filteredArray.length === 0) {\n    throw new Error('Sensors loading')\n  }\n\n  return filteredArray\n}\n\n// Sets new url endpoint to localstorage\nexport const handleSensorEndpointUpdateForToken = (sensorUrlField, setToken) => {\n  const currentToken = JSON.parse(localStorage.getItem('kaste-user-token'))\n  localStorage.removeItem('kaste-user-token')\n\n  const updatedToken = {\n    ...currentToken,\n    sensorEndpoint: sensorUrlField\n  }\n\n  window.localStorage.setItem('kaste-user-token', JSON.stringify(updatedToken))\n  setToken(updatedToken)\n}\n\n\nexport default { includedIn, formatSensorData, handleSensorEndpointUpdateForToken }","import { gql } from 'apollo-boost'\n\nconst sensorData = gql`\n  query SensorData($sensorEndpoint: String!) {\n  sensorData (sensorEndpoint: $sensorEndpoint){\n    value\n  }\n}\n`\n\nexport default sensorData","import { useApolloClient } from '@apollo/react-hooks'\n\n// Fires sensor actions, requires url and mutation as arguments\nexport const useAction = () => {\n  const client = useApolloClient()\n\n  const fireAction = (actionUrl, mutation) => {\n    const response = client.mutate({\n      mutation: mutation,\n      variables: { sensorEndpoint: actionUrl }\n    })\n    return response\n  }\n\n  return fireAction\n}","import { gql } from 'apollo-boost'\n\nconst startWatering = gql`\nmutation startWatering(\n  $sensorEndpoint: String!\n  ) {\n    startWatering(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default startWatering","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal, Button, Icon, Menu, Header } from 'semantic-ui-react'\n// Custom hooks\nimport { useAction } from '../hooks/useAction'\n// Typedefs\nimport startWatering from '../graphql/mutations/startWatering'\n\nconst WateringModal = ({ actions, wateringConnected, setPage }) => {\n  const [showModal, setShowModal] = useState(false)\n  const fireAction = useAction()\n\n  const handleWatering = (duration, action) => {\n    // setRecentlyWatered(true)\n    try {\n      setShowModal(false)\n      fireAction(action, startWatering)\n      setPage('Video')\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n\n  return (\n    <Modal\n      centered\n      basic\n      open={showModal}\n      onClose={() => setShowModal(false)}\n      trigger={\n        <Menu.Item\n          data-cy='water-button'\n          onClick={() => setShowModal(true)}\n          disabled={!wateringConnected}>\n          <Icon name='shower' />\n          Water Plants\n        </Menu.Item>\n      }\n      style={{\n        textAlign: 'center'\n      }}>\n      <Icon name='shower' size='massive' />\n      <Header content='Choose watering duration:' icon='clock' />\n      <Modal.Actions style={{ textAlign: 'center', marginTop: 15 }}>\n        <Button.Group>\n          <Button\n            data-cy='modal-button-1min'\n            color='green'\n            onClick={() => handleWatering(1, actions.water.oneMin)}>\n            1 min\n          </Button>\n          <Button.Or />\n          <Button\n            data-cy='modal-button-5min'\n            color='green'\n            onClick={() => handleWatering(5, actions.water.fiveMin)}>\n            5 min\n          </Button>\n          <Button.Or />\n          <Button\n            data-cy='modal-button-10min'\n            color='green'\n            onClick={() => handleWatering(10, actions.water.tenMin)}>\n            10 min\n          </Button>\n        </Button.Group>\n        <Button\n          data-cy='modal-button-cancel'\n          color='red'\n          onClick={() => setShowModal(false)}\n          style={{ marginTop: 20 }}>\n          cancel\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\n// Proptypes\nWateringModal.propTypes = {\n  actions: PropTypes.object,\n  wateringConnected: PropTypes.bool.isRequired,\n  setPage: PropTypes.func.isRequired\n}\n\nexport default WateringModal","import { gql } from 'apollo-boost'\n\nconst stopWatering = gql`\nmutation stopWatering(\n  $sensorEndpoint: String!\n  ) {\n    stopWatering(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default stopWatering","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Responsive, Sidebar, Menu, Icon } from 'semantic-ui-react'\n// Components\nimport WateringModal from './WateringModal'\n// Custom hooks\nimport { useAction } from '../hooks/useAction'\n// Typedefs\nimport stopWatering from '../graphql/mutations/stopWatering'\n\n\nconst MobileContainer = ({ children, setPage, logOut, page, actions, token }) => {\n  const [showSidebar, setShowSidebar] = useState(false)\n  const [cameraConnected, setCameraConnected] = useState(false)\n\n  const [wateringConnected, setWateringConnected] = useState(false)\n  const fireAction = useAction()\n\n  // Handles page navigation\n  const handleViewChange = (view) => () => {\n    setShowSidebar(false)\n    setPage(view)\n  }\n\n  // Stops watering\n  const handleStopWatering = () => {\n    setShowSidebar(false)\n    fireAction(actions.water.waterstop, stopWatering)\n  }\n\n  // Check if sensor actions include camera or watering functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  return (\n    <>\n      <Responsive\n        maxWidth={Responsive.onlyMobile.maxWidth}\n        as={Sidebar.Pushable}\n        style={{ height: '100vh' }}\n      >\n        <Sidebar\n          as={Menu}\n          animation='push'\n          inverted\n          onHide={() => setShowSidebar(false)}\n          vertical\n          visible={showSidebar}\n          icon='labeled'\n          width='thin'\n        >\n          {token &&\n            <Menu.Header as='small' style={{ color: 'white' }}>\n              <Icon name='user' color='green' />\n              {token.username}\n            </Menu.Header>\n          }\n          <Menu.Item\n            data-cy='sensors-button'\n            onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='chat-button'\n            onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='settings-button'\n            onClick={handleViewChange('Settings')}>\n            <Icon name='settings' />\n            Settings\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='about-button'\n            onClick={handleViewChange('About')}>\n            <Icon name='question' />\n            About\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='livefeed-button'\n            disabled={!cameraConnected}\n            onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n\n          <WateringModal\n            actions={actions}\n            wateringConnected={wateringConnected}\n            setPage={setPage}\n          />\n\n          <Menu.Item\n            data-cy='stop-button'\n            disabled={!wateringConnected}\n            onClick={handleStopWatering}>\n            <Icon name='stop circle' />\n            Stop Watering\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher style={{ height: '100%' }} dimmed={showSidebar}>\n\n          <Menu widths={3} inverted pointing color='green' size='large' style={{ height: '50px', marginBottom: 0, borderRadius: 0 }}>\n            <Menu.Item onClick={() => setShowSidebar(true)} style={{ alignSelf: 'center' }}>\n              <Icon data-cy='sidebar-button' name='sidebar' />\n            </Menu.Item>\n            <Menu.Item header={true}>\n              {page}\n            </Menu.Item>\n            <Menu.Item position='right' onClick={() => logOut()} style={{ alignSelf: 'center' }}>\n              <Icon name='log out' />\n            </Menu.Item>\n          </Menu>\n\n          <div\n            style={{\n              height: 'calc(100vh - 50px)'\n            }}>\n            {children}\n          </div>\n\n        </Sidebar.Pusher>\n      </Responsive>\n    </>\n  )\n}\n\n// Proptypes\nMobileContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default MobileContainer","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Responsive, Menu, Icon } from 'semantic-ui-react'\n// Components\nimport WateringModal from './WateringModal'\n// Custom hooks\nimport {useAction} from '../hooks/useAction'\n// Typedefs\nimport stopWatering from '../graphql/mutations/stopWatering'\n\nconst DesktopContainer = ({ children, setPage, logOut, actions, token }) => {\n  const [cameraConnected, setCameraConnected] = useState(false)\n  const [wateringConnected, setWateringConnected] = useState(false)\n  const fireAction = useAction()\n\n  // Handles page navigation\n  const handleViewChange = (view) => () => {\n    setPage(view)\n  }\n\n  // Stops watering\n  const handleStopWatering = () => {\n    fireAction(actions.water.waterstop, stopWatering)\n  }\n\n  // Check if sensor actions include camera or watering functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  return (\n    <>\n      <Responsive\n        style={{ height: '100vh' }}\n        minWidth={Responsive.onlyTablet.minWidth}\n      >\n        <Menu\n          style={{ height: 71 }}\n          inverted\n          icon='labeled'\n          color='green'\n          fixed='top'\n        >\n\n          <Menu.Item\n            data-cy='sensors-button'\n            onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='chat-button'\n            onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n\n          <WateringModal\n            actions={actions}\n            wateringConnected={wateringConnected}\n            setPage={setPage}\n          />\n\n          <Menu.Item\n            data-cy='stop-button'\n            disabled={!wateringConnected}\n            onClick={handleStopWatering}>\n            <Icon name='stop circle' />\n            Stop Watering\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='livefeed-button'\n            disabled={!cameraConnected}\n            onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n\n          <Menu.Menu position='right'>\n            {token &&\n              <Menu.Header as='p' style={{ color: 'white', alignSelf: 'center', margin: '0 10px 0' }}>\n                <Icon name='user' />\n                {token.username} <br />\n                logged in\n              </Menu.Header>\n            }\n\n            <Menu.Item\n              data-cy='settings-button'\n              onClick={handleViewChange('Settings')}>\n              <Icon name='settings' />\n              Settings\n            </Menu.Item>\n\n            <Menu.Item\n              data-cy='about-button'\n              onClick={handleViewChange('About')}>\n              <Icon name='question' />\n              About\n            </Menu.Item>\n\n            <Menu.Item\n              data-cy='logout-button'\n              onClick={() => logOut(false)}>\n              <Icon name='log out' />\n              Log out\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n\n        <div style={{ height: 71 }} />\n        <div style={{ height: 'calc(100vh - 71px)' }}>\n          {children}\n        </div>\n\n      </Responsive>\n    </>\n  )\n}\n\n// Proptypes\nDesktopContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default DesktopContainer","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\n// Components\nimport MobileContainer from './MobileContainer'\nimport DesktopContainer from './DesktopContainer'\n\nconst ResponsiveLayout = ({ children, setPage, logOut, page, actions, token, sensorService }) => {\n\n  return (\n    <>\n      <MobileContainer // Mobile view\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}\n        sensorService={sensorService}\n      >\n\n        {children}\n\n      </MobileContainer>\n\n      <DesktopContainer // Tablet - desktop view\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}\n        sensorService={sensorService}\n      >\n\n        {children}\n\n      </DesktopContainer>\n    </>\n  )\n}\n\n// Proptypes\nResponsiveLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default ResponsiveLayout","import { gql } from 'apollo-boost'\n\nconst loginUser = gql`\nmutation loginUser(\n  $password: String!\n  $username: String!\n  ) {\n  login(\n    password: $password\n    username: $username\n  ) {\n    value\n    username\n    sensorEndpoint\n  }\n}\n`\n\nexport default loginUser","import { gql } from 'apollo-boost'\n\nconst currentUser = gql`\n{\n  me {\n    name\n    username\n    id\n    sensorEndpoint\n  }\n}\n`\n\nexport default currentUser","import { useState } from 'react'\n// Taken from Helsinki University - Fullstack course (2019)\n\nexport const useField = (type) => {\n  const [value, setValue] = useState('')\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  const reset = () => {\n    setValue('')\n  }\n\n  return {\n    type,\n    value,\n    onChange,\n    reset\n  }\n}","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Segment } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\n// TypeDefs\nimport loginUser from '../graphql/mutations/loginUser'\nimport currentUser from '../graphql/queries/currentUser'\n// Custom hooks\nimport { useField } from '../hooks/useField'\n\nconst LoginForm = ({ setNotification, setToken }) => {\n  const [login] = useMutation(loginUser)\n  // eslint-disable-next-line no-unused-vars\n  const { reset: usernameReset, ...username } = useField('text')\n  // eslint-disable-next-line no-unused-vars\n  const { reset: passwordReset, ...password } = useField('password')\n\n\n  const handleLogin = async () => {\n    try {\n      await login({\n        update: (client, result) => {\n          const token = result.data.login\n          setToken(token)\n          localStorage.setItem('kaste-user-token', JSON.stringify(token))\n        },\n        variables: {\n          username: username.value,\n          password: password.value\n        },\n        refetchQueries: [{ query: currentUser }]\n      })\n    } catch (error) {\n      setNotification(error.graphQLErrors[0].message)\n    }\n  }\n\n  return (\n    <Form size='large' onSubmit={handleLogin}>\n      <Segment stacked raised>\n        <Form.Input\n          {...username}\n          data-cy='username'\n          fluid\n          icon='user'\n          iconPosition='left'\n          placeholder='Username'\n          autoComplete='current-username'\n        />\n        <Form.Input\n          {...password}\n          data-cy='password'\n          fluid\n          icon='lock'\n          iconPosition='left'\n          placeholder='Password'\n          autoComplete='current-password'\n        />\n\n        <Button color='brown' size='large' type='submit'>\n          Log in\n        </Button>\n      </Segment>\n    </Form>\n  )\n}\n\nLoginForm.propTypes = {\n  setNotification: PropTypes.func.isRequired,\n  setToken: PropTypes.func.isRequired,\n}\n\n\nexport default LoginForm","import { gql } from 'apollo-boost'\n\nconst createUser = gql`\nmutation createUser(\n  $name: String!\n  $password: String!\n  $username: String!\n  ) {\n  createUser(\n    password: $password\n    username: $username\n    name: $name\n  ) {\n    username\n    sensorEndpoint\n  }\n}\n`\n\nexport default createUser","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Segment } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\n// TypeDefs\nimport createUser from '../graphql/mutations/createUser'\n// Custom hooks\nimport { useField } from '../hooks/useField'\n\nconst RegisterForm = ({ setNotification, setLoginVisible }) => {\n  const [register] = useMutation(createUser)\n  const { reset: usernameReset, ...username } = useField('text')\n  const { reset: nameReset, ...name } = useField('text')\n  const { reset: passwordReset, ...password } = useField('password')\n\n  const handleRegister = async () => {\n    try {\n      await register({\n        variables: {\n          username: username.value,\n          password: password.value,\n          name: name.value\n        }\n      })\n      setNotification('Register succesful')\n      usernameReset()\n      nameReset()\n      passwordReset()\n      setLoginVisible(true)\n    } catch (error) {\n      console.log(error)\n      setNotification(error.graphQLErrors[0].message)\n    }\n  }\n\n  return (\n    <Form\n      size='large'\n      onSubmit={handleRegister}\n      autoComplete='new-password'>\n\n      <Segment stacked raised>\n        <Form.Input\n          {...username}\n          data-cy='username'\n          fluid\n          icon='user'\n          iconPosition='left'\n          placeholder='Username'\n          autoComplete='new-password'\n        />\n        <Form.Input\n          {...name}\n          data-cy='name'\n          fluid\n          icon='user outline'\n          iconPosition='left'\n          placeholder='Name'\n          autoComplete='new-password'\n        />\n        <Form.Input\n          {...password}\n          data-cy='password'\n          fluid\n          icon='lock'\n          iconPosition='left'\n          placeholder='Password'\n          autoComplete='new-password'\n        />\n\n        <Button color='brown' size='large' type='submit'>\n          Register\n        </Button>\n      </Segment>\n    </Form>\n  )\n}\n\nRegisterForm.propTypes = {\n  setNotification: PropTypes.func.isRequired,\n  setLoginVisible: PropTypes.func.isRequired,\n}\n\nexport default RegisterForm","import { useState } from 'react'\n\n// Provide duration as argument (seconds)\nexport const useNotification = (duration = 5) => {\n  const [text, setText] = useState(null)\n\n  const reset = () => setText(null)\n\n  const set = (text) => {\n    setText(text)\n    setTimeout(() => {\n      reset()\n    }, duration * 1000)\n  }\n\n  return [text, set]\n}","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Menu, Message, Grid, Header } from 'semantic-ui-react'\n// Components\nimport LoginForm from './LoginForm'\nimport RegisterForm from './RegisterForm'\n// Hooks\nimport {useNotification} from '../hooks/useNotification'\n\n\nconst LoginView = ({ setToken }) => {\n  const [notification, setNotification] = useNotification()\n  const [loginVisible, setLoginVisible] = useState(true)\n\n  return (\n    <div className='login-form'>\n\n      <style> {`\n  body > div,\n  body > div > div,\n  body > div > div > div.login-form {\n    height: 100%;\n  }\n          `}\n      </style>\n\n      <Grid textAlign='center' style={{ height: '100vh', background: 'lightgreen', margin: 0 }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 250 }}>\n          <Header as='h1' color='grey' dividing textAlign='center'>\n            Log in to Kaste 2.0\n          </Header>\n\n          <Menu widths={2} color='brown'>\n            <Menu.Item onClick={() => setLoginVisible(true)}\n              active={loginVisible}>\n              Login\n            </Menu.Item>\n            <Menu.Item onClick={() => setLoginVisible(false)}\n              active={!loginVisible}>\n              Register\n            </Menu.Item>\n          </Menu>\n          {\n            loginVisible\n              ? <LoginForm\n                setNotification={setNotification}\n                setToken={setToken}\n              />\n              : <RegisterForm\n                setLoginVisible={setLoginVisible}\n                setNotification={setNotification}\n              />\n          }\n\n\n          {notification &&\n            <Message\n              positive={notification === 'Register succesful'}\n              negative={notification !== 'Register succesful'} >\n              {notification}\n            </Message>\n          }\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\n// Proptypes\nLoginView.propTypes = {\n  setToken: PropTypes.func.isRequired\n}\n\nexport default LoginView","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon } from 'semantic-ui-react'\n\nconst SensorValue = ({ value, icon, iconColor, size }) => {\n  return (\n    <div>\n      <Icon name={icon} size={size} color={iconColor ? iconColor : null} />\n      <span style={{\n        fontSize: `${size === 'large' ? '13px' : '11px'}`,\n        verticalAlign: 'middle'\n      }}>\n        {value}\n      </span>\n    </div>\n  )\n}\n\n// Proptypes\nSensorValue.propTypes = {\n  value: PropTypes.any,\n  icon: PropTypes.string.isRequired,\n  iconColor: PropTypes.string,\n  size: PropTypes.string.isRequired,\n}\n\nexport default SensorValue","import { gql } from 'apollo-boost'\n\nconst chartData = gql`\n  query ChartData($id: Int!, $type: HousePlant!, $range: DayWeekMonthYear!) {\n  chartData(id: $id, type: $type, range: $range) {\n    time\n    light_lux\n    ec_mS_cm\n    soil_moisture\n    temperature_C\n    humidity\n    CO2_ppm\n  }\n}\n`\n\nexport default chartData","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nconst Loading = ({ inverted }) => (\n  <Dimmer inverted={inverted} active>\n    <Loader size='massive'>Loading</Loader>\n  </Dimmer>\n)\n\n// Proptypes\nLoading.propTypes = {\n  inverted: PropTypes.bool.isRequired\n}\n\nexport default Loading","// Libraries\nimport moment from 'moment'\n\nconst returnColor = (measure) => {\n  switch (measure) {\n  case 'temperature_C':\n    return 'rgba(219, 40, 40, 1)'\n  case 'ec_mS_cm':\n    return 'rgba(242, 113, 28, 1)'\n  case 'light_lux':\n    return 'rgba(251, 189, 8, 1)'\n  case 'humidity':\n    return 'rgba(33, 133, 208, 1)'\n  case 'soil_moisture':\n    return 'rgba(33, 133, 208, 1)'\n  case 'CO2_ppm':\n    return 'rgba(0, 0, 0, 1)'\n  default: break\n  }\n}\n\nexport const formatSensorDataIntoChartData = ({ chartData }, chartFilter) => {\n\n  const formattedChartData = Object.keys(chartData)\n    .reduce((acc, cur) => {\n      if (cur === '__typename' || chartData[cur] === null) {\n        return acc\n      }\n\n      if (cur === 'time') {\n        acc.labels = chartData[cur].map(time => {\n          moment.relativeTimeThreshold('h', 25)\n          return moment(time).subtract(3, 'hours')\n        })\n        return acc\n      }\n\n      if (chartFilter.includes(cur)) {\n        acc.datasets.push(\n          {\n            label: cur,\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: returnColor(cur),\n            borderColor: returnColor(cur),\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: returnColor(cur),\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: returnColor(cur),\n            pointHoverBorderColor: returnColor(cur),\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            yAxisID: cur === 'soil_moisture' || cur === 'humidity' ? 'y-axis-2' : 'y-axis-1',\n            data: chartData[cur]\n          }\n\n        )\n      }\n      return acc\n    }, { labels: [], datasets: [] })\n  return formattedChartData\n}\n\nexport const options = (range, chartFilter) => {\n\n  // define unit value based on range\n  const unit = () => {\n    switch (range) {\n    case 'DAY':\n      return 'minute'\n    case 'WEEK':\n      return 'hour'\n    case 'MONTH':\n      return 'day'\n    case 'YEAR':\n      return 'day'\n    default:\n      break\n    }\n  }\n\n  // define label based on chartFilter\n  const returnYLabel = () => {\n    switch (chartFilter[0]) {\n    case 'temperature_C':\n      return 'ºC'\n    case 'light_lux':\n      return 'klx'\n    case 'ec_mS_cm':\n      return 'mS'\n    case 'CO2_ppm':\n      return 'ppm'\n    default:\n      break\n    }\n  }\n\n  // define yAxes\n  const yAxes = () => {\n    \n    const yAxisLeft = {\n      id: 'y-axis-1',\n      position: 'left',\n      ticks: {\n        suggestedMin: 0,\n        callback: (value, index) => index === 0 ? value + returnYLabel() : value,\n        fontColor: returnColor(chartFilter[0])\n      },\n      gridLines: {\n        drawBorder: false,\n      }\n    }\n\n    const yAxisRight = {\n      id: 'y-axis-2',\n      position: 'right',\n      display: chartFilter[0] === 'temperature_C' ? true : false,\n      ticks: {\n        suggestedMin: 0,\n        max: 100,\n        callback: (value, index) => index === 0 ? value + '%' : value,\n        fontColor: 'rgba(33, 133, 208, 1)'\n      },\n      gridLines: {\n        drawBorder: false,\n        display: false\n      }\n    }\n\n    if (chartFilter[0] === 'temperature_C') {\n      return [yAxisLeft, yAxisRight]\n    } else {\n      return [yAxisLeft]\n    }\n  }\n\n  // define options\n  const optionsObj = {\n    scales: {\n      xAxes: [\n        {\n          type: 'time',\n          time: {\n            unit: unit(),\n            displayFormats: {\n              minute: 'HH:mm',\n              hour: 'dd HH:mm',\n              day: 'DD.M',\n\n            },\n          },\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 6,\n            maxRotation: 0\n          }\n        }\n      ],\n      yAxes: yAxes()\n    },\n    legend: {\n      display: false\n    }\n  }\n\n  // return options object\n  return optionsObj\n}","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Line } from 'react-chartjs-2'\nimport { Segment } from 'semantic-ui-react'\n// TypeDefs\nimport chartData from '../graphql/queries/chartData'\n// Components\nimport Loading from './Loading'\n// Utils\nimport { formatSensorDataIntoChartData, options } from '../utilities/chartConfig'\n\nconst Chart = ({ sensor, chartTimeRange, chartFilter }) => {\n  const plantData = useQuery(chartData, {\n    variables: { id: sensor.id, type: sensor.type.toUpperCase(), range: chartTimeRange },\n    fetchPolicy: 'no-cache'\n  })\n\n  if (plantData.loading) {\n    return (\n      <div style={{ minHeight: 'calc(89vw / 2)' }}>\n        <Loading inverted={true} />\n      </div>\n    )\n  }\n\n  if (Object.keys(plantData.data).length === 0) {\n    return (\n      <Segment color='red' inverted secondary>\n        Chart failed to load\n      </Segment>\n    )\n  }\n\n  const formattedChartData = formatSensorDataIntoChartData(plantData.data, chartFilter)\n  return (\n    <Line\n      data={formattedChartData}\n      options={options(chartTimeRange, chartFilter)}\n      redraw={true}\n    />\n  )\n}\n\n// Proptypes\nChart.propTypes = {\n  chartFilter: PropTypes.array.isRequired,\n  sensor: PropTypes.object.isRequired,\n  chartTimeRange: PropTypes.string.isRequired\n}\n\nexport default Chart","import { gql } from 'apollo-boost'\n\nconst clearChartData = gql`\nmutation clearChartData(\n  $id: ID!\n  ) {\n    clearChartData(\n    id: $id\n  ) {\n    message\n  }\n}\n`\n\nexport default clearChartData","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid, Button, Header, Segment, Icon } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\nimport moment from 'moment'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n// TypeDefs\nimport clearChartData from '../graphql/mutations/clearChartData'\nimport chartData from '../graphql/queries/chartData'\n\nconst columnStyle = { padding: 0, margin: 0 }\n\nconst chartFilterDef = ['temperature_C', 'soil_moisture']\nconst chartFilterLight = ['light_lux']\nconst chartFilterNutr = ['ec_mS_cm']\n\nconst PlantSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n  const [measures, setMeasures] = useState(chartFilterDef)\n  const [clearChartHistory] = useMutation(clearChartData, {\n    refetchQueries: () => [{\n      query: chartData,\n      variables: { id: sensor.id, type: \"PLANT\", range: chartTimeRange }\n    }]\n  })\n\n  const handleClearData = () => {\n    const confirmation = window.confirm('Are you sure you want to delete all data that this sensor has gathered to DB?')\n\n    if (confirmation === false) {\n      return\n    }\n\n    clearChartHistory({\n      variables: { id: sensor.id }\n    })\n  }\n\n  return (\n    <Segment\n      color='green'\n      inverted\n      secondary\n      style={{ margin: '2px 1px' }}>\n\n      <Header textAlign='center' as='h3'>\n        <a\n          style={{ color: 'inherit' }}\n          href={`https://en.wikipedia.org/wiki/${sensor.name}`}\n          target='_blank'\n          rel=\"noopener noreferrer\">\n          <Icon name='leaf' size='large' />\n        </a>\n        {sensor.name}\n      </Header>\n\n      <Grid textAlign='center' columns={4} >\n        <Grid.Row>\n\n          <Grid.Column\n            style={columnStyle}\n            color={sensor.soil_moisture < 10 ? 'red' : null}>\n            <SensorValue\n              size={'large'}\n              value={sensor.soil_moisture + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column style={columnStyle}>\n            <SensorValue\n              size={'large'}\n              value={sensor.light_lux + ' klx'}\n              label={'Light'}\n              icon={'sun'}\n              iconColor={'yellow'}\n            />\n          </Grid.Column>\n\n          <Grid.Column style={columnStyle}>\n            <SensorValue\n              size={'large'}\n              value={sensor.ec_mS_cm + ' mS'}\n              label={'Nutrient'}\n              icon={'pills'}\n              iconColor={'orange'}\n            />\n          </Grid.Column>\n\n          <Grid.Column style={columnStyle}>\n            <SensorValue\n              size={'large'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button\n              data-cy='chart-toggle-button'\n              circular icon={chartVisible ? 'close' : 'chart area'}\n              onClick={() => setChartVisible(!chartVisible)} />\n            <Button style={{ display: chartVisible ? 'inline-block' : 'none' }}\n              data-cy='chart-clearData-button'\n              circular icon={'trash alternate'}\n              onClick={handleClearData}\n            />\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row\n          columns={1}\n          centered\n          style={{\n            display: `${chartVisible ? 'block' : 'none'}`,\n            padding: 5\n          }}>\n\n          <Grid.Column textAlign='center' style={{ padding: 0, maxWidth: 1300 }}>\n            <Button.Group attached='top'>\n              <Button onClick={() => setChartTimeRange('DAY')}>D</Button>\n              <Button onClick={() => setChartTimeRange('WEEK')}>W</Button>\n              <Button onClick={() => setChartTimeRange('MONTH')}>M</Button>\n              <Button onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n            </Button.Group>\n\n\n            <Segment style={{ margin: '0 auto', padding: 5 }}>\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange}\n                chartFilter={measures} />\n            </Segment>\n\n            <Button.Group attached='bottom'>\n              <Button onClick={() => setMeasures(chartFilterDef)}>temp + moist.</Button>\n              <Button onClick={() => setMeasures(chartFilterLight)}>light</Button>\n              <Button onClick={() => setMeasures(chartFilterNutr)}>nutrition</Button>\n            </Button.Group>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n            <SensorValue\n              value={moment(sensor.time).fromNow()}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={moment() - moment(sensor.time) > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              value={sensor.battery_low + ' %'}\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low < 30 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  )\n}\n\n// Proptypes\nPlantSensor.propTypes = {\n  sensor: PropTypes.object.isRequired\n}\n\nexport default PlantSensor","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment, Grid, Header, Icon, Button } from 'semantic-ui-react'\nimport moment from 'moment'\nimport { useMutation } from '@apollo/react-hooks'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n// TypeDefs\nimport clearChartData from '../graphql/mutations/clearChartData'\nimport chartData from '../graphql/queries/chartData'\n\nconst chartFilterDef = ['temperature_C', 'humidity']\nconst chartFilterCO2 = ['CO2_ppm']\n\nconst HouseSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n  const [measures, setMeasures] = useState(chartFilterDef)\n  const [clearChartHistory] = useMutation(clearChartData, {\n    refetchQueries: () => [{\n      query: chartData,\n      variables: {id: sensor.id, type: \"HOUSE\" , range: chartTimeRange}}]\n  })\n\n  const handleClearData = () => {\n    const confirmation = window.confirm('Are you sure you want to delete all data that this sensor has gathered to DB?')\n\n    if (confirmation === false) {\n      return\n    }\n\n    clearChartHistory({\n      variables: { id: sensor.id },\n    })\n  }\n\n  return (\n    <Segment inverted secondary style={{ margin: '2px 1px', background: 'beige', color: 'black' }}>\n      <Header style={{ color: 'black' }} textAlign='center' as='h3'>\n        <Icon name='home' color='black' size='large' />\n        {sensor.location}\n      </Header>\n\n      <Grid textAlign='center' columns={sensor.CO2_ppm ? 3 : 2} >\n        <Grid.Row>\n\n          <Grid.Column>\n            <SensorValue\n              size={'large'}\n              value={sensor.humidity + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          {\n            sensor.CO2_ppm &&\n            <Grid.Column style={{ fontSize: 13 }}>\n              <strong>\n                <span style={{ background: 'lightgray', padding: 5, borderRadius: 5 }}>\n                  CO<sup>2</sup>\n                </span>\n              </strong>\n              <span> {sensor.CO2_ppm} ppm</span>\n            </Grid.Column>\n          }\n\n          <Grid.Column>\n            <SensorValue\n              size={'large'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n          <Grid.Column textAlign='center'>\n            <Button\n              data-cy='chart-toggle-button'\n              circular icon={chartVisible ? 'close' : 'chart area'}\n              onClick={() => setChartVisible(!chartVisible)} />\n            <Button style={{ display: chartVisible ? 'inline-block' : 'none' }}\n              data-cy='chart-clearData-button'\n              circular icon={'trash alternate'}\n              onClick={handleClearData}\n            />\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row\n          columns={1}\n          centered\n          style={{\n            display: `${chartVisible ? 'block' : 'none'}`,\n            padding: 5\n          }}>\n          <Grid.Column style={{ padding: 0 }}>\n            <Button.Group attached='top' style={{ maxWidth: 1300 }}>\n              <Button onClick={() => setChartTimeRange('DAY')}>D</Button>\n              <Button onClick={() => setChartTimeRange('WEEK')}>W</Button>\n              <Button onClick={() => setChartTimeRange('MONTH')}>M</Button>\n              <Button onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n            </Button.Group>\n\n            <Segment style={{ margin: '0 auto', padding: 5 }}>\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange}\n                chartFilter={measures} />\n            </Segment>\n\n            {\n              sensor.CO2_ppm &&\n              <Button.Group attached='bottom'>\n                <Button onClick={() => setMeasures(chartFilterDef)}>hum / temp</Button>\n                <Button onClick={() => setMeasures(chartFilterCO2)}>CO<sup>2</sup></Button>\n              </Button.Group>\n            }\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={sensor.CO2_ppm ? 1 : 2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n\n            <SensorValue\n              value={moment(sensor.time).fromNow()}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={moment() - moment(sensor.time) > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          {\n            sensor.battery_low !== undefined &&\n            <Grid.Column textAlign='right'>\n              <SensorValue\n                label={'Battery'}\n                size={'small'}\n                icon={'battery full'}\n                iconColor={sensor.battery_low === 1 ? 'red' : null}\n              />\n            </Grid.Column>\n          }\n\n        </Grid.Row>\n      </Grid>\n\n    </Segment >\n  )\n}\n\n// Proptypes\nHouseSensor.propTypes = {\n  sensor: PropTypes.object.isRequired\n}\n\nexport default HouseSensor","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment } from 'semantic-ui-react'\n// Components\nimport PlantSensor from './PlantSensor'\nimport HouseSensor from './HouseSensor'\n\n\nconst SensorView = ({ show, sensorData, sensorError, token }) => {\n\n  if (!show) {\n    return null\n  }\n\n  const notifyStatus = () => {\n\n    if (sensorError === 'Sensors loading') {\n      return <Segment\n        secondary\n        inverted\n        color='green'\n        textAlign='center'>\n        Sensors loading\n      </Segment>\n    }\n\n    if (!token.sensorEndpoint || sensorError === 'GraphQL error: Request failed with status code 404') {\n      return (\n        <Segment\n          secondary\n          inverted\n          color='red'\n          textAlign='center'>\n          {!token.sensorEndpoint\n            ? 'Not connected to any sensor endpoint'\n            : 'Rasp offline or starting from reboot'\n          }\n        </Segment>\n      )\n    }\n    return null\n  }\n\n  const sensors = () =>\n    sensorData\n      ? sensorData.map(sensor =>\n        sensor.type === 'plant'\n          ? <PlantSensor key={sensor.id} sensor={sensor} />\n          : <HouseSensor key={sensor.id} sensor={sensor} />)\n      : null\n\n  return (\n    <div style={{ height: '100%', overflowY: 'scroll' }}>\n      {sensorError || !token.sensorEndpoint\n        ? notifyStatus()\n        : sensors()\n      }\n    </div>\n  )\n}\n\n// Proptypes\nSensorView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  sensorData: PropTypes.array,\n  sensorError: PropTypes.string,\n  token: PropTypes.object\n}\n\nexport default SensorView","import { gql } from 'apollo-boost'\n\nconst chatMessages = gql`\n{\n  messages {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default chatMessages","import { gql } from 'apollo-boost'\n\nconst createMessage = gql`\nmutation createMessage(\n  $content: String!\n  ) {\n  createMessage(\n    content: $content\n  ) {\n    content\n    user {\n      name\n    }\n    created\n    id\n  }\n}\n`\n\nexport default createMessage","import { gql } from 'apollo-boost'\n\nconst messageAdded = gql`\nsubscription {\n  messageAdded {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default messageAdded","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment, Comment, Divider } from 'semantic-ui-react'\n\nconst ChatMessage = ({ message, currentUser }) => {\n\n  if (!currentUser.me) {\n    return null\n  }\n\n  // Defines message color by user\n  const defSegColor = currentUser.me.name === message.user.name\n    ? 'blue'\n    : 'green'\n\n  // Defines float side by user\n  const defFloatSide = currentUser.me.name === message.user.name\n    ? 'right'\n    : 'left'\n\n  const segmentStyle = {\n    margin: '0 0 5px 0',\n    padding: 7,\n    float: `${defFloatSide}`,\n    clear: 'both'\n  }\n\n  return (\n    <Comment\n      data-cy='message'\n      style={{ marginTop: 7, paddingTop: 7, overflow: 'auto' }}>\n      <Segment\n        style={segmentStyle} compact inverted color={defSegColor} secondary>\n        <Comment.Content>\n          <Comment.Author as='span'>\n            {message.user.name}\n          </Comment.Author>\n          <Comment.Metadata>\n            <div>{new Date(parseInt(message.created)).toLocaleString()}</div>\n          </Comment.Metadata>\n          <Divider style={{ margin: '4px 0px 4px 0px' }} />\n          {message.content}\n        </Comment.Content>\n      </Segment>\n    </Comment>\n  )\n}\n\n// Proptypes\nChatMessage.propTypes = {\n  message: PropTypes.object.isRequired,\n  currentUser: PropTypes.object.isRequired\n}\n\nexport default ChatMessage","// Libraries\nimport React, { useState, useRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks'\nimport { Container, Icon, Comment, Menu, Input } from 'semantic-ui-react'\n// TypeDefs\nimport chatMessages from '../graphql/queries/chatMessages'\nimport currentUser from '../graphql/queries/currentUser'\nimport createMessage from '../graphql/mutations/createMessage'\nimport messageAdded from '../graphql/subscriptions/messageAdded'\n// Components\nimport ChatMessage from './ChatMessage'\nimport Loading from './Loading'\n// Custom hooks\nimport { useField } from '../hooks/useField'\n// Helper functions\nimport { includedIn } from '../utilities/helperFuncs'\n\nconst ChatView = ({ show }) => {\n  const { data, loading } = useQuery(chatMessages)\n  const userQuery = useQuery(currentUser)\n  const { reset: resetMessageInput, ...messageInput } = useField('text')\n  const [addMessage] = useMutation(createMessage)\n  const el = useRef(null)\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [show])\n\n  // eslint-disable-next-line no-unused-vars\n  const addedMessage = useSubscription(messageAdded, {\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      const messageData = client.readQuery({ query: chatMessages })\n      const addedMessage = subscriptionData.data.messageAdded\n\n      if (!includedIn(messageData.messages, addedMessage.id)) {\n        client.writeQuery({\n          query: chatMessages,\n          data: { messages: [...messageData.messages, subscriptionData.data.messageAdded] },\n          id: 1,\n        })\n        el.current.scrollIntoView({ block: 'end', behavior: 'smooth' })\n      }\n    }\n  })\n\n  const scrollToBottom = () => {\n    if (!el.current) { return }\n    el.current.scrollIntoView({ block: 'end' })\n  }\n\n  const handleSubmit = () => {\n    // Prevents empty messages\n    if (messageInput.length < 1) {\n      return\n    }\n\n    addMessage({\n      variables: {\n        \"content\": messageInput.value\n      }\n    })\n    resetMessageInput()\n  }\n\n  if (!show) {\n    return null\n  }\n\n  if (data.messages !== undefined) {\n\n    console.log('RERENDER seconds', new Date(Date.now()).getSeconds(), 'messages', data.messages.length)\n  }\n\n  return (\n    <div style={{ height: '100%' }}>\n      <div style={{\n        height: 'calc(100% -  60px)',\n        overflowY: 'scroll',\n      }}>\n        <Container>\n          {\n            loading || userQuery.loading\n              ?\n              <Loading inverted={true} />\n              :\n              <Comment.Group>\n                {\n                  data.messages !== undefined\n                    ?\n                    data.messages.map(message => (\n                      <ChatMessage\n                        key={message.id}\n                        message={message}\n                        currentUser={userQuery.data}\n                      />\n                    ))\n                    : null\n                }\n              </Comment.Group>\n          }\n          <div id={'el'} ref={el}></div>\n        </Container>\n      </div>\n\n      <Menu fluid color='grey' style={{ marginBottom: 0, marginTop: 0, height: '60px' }}>\n        <Menu.Item style={{ width: '80vw' }}>\n          <Input\n            {...messageInput}\n            data-cy='chat-input'\n            fluid\n            onKeyPress={({ key }) => {\n              if (key === 'Enter') {\n                handleSubmit()\n              }\n            }}\n            onFocus={scrollToBottom}\n          />\n        </Menu.Item>\n        <Menu.Item\n          style={{ width: '20vw', justifyContent: 'center' }}\n          onClick={handleSubmit}>\n          <Icon\n            name='send'\n            inverted\n            circular\n            color='green' />\n        </Menu.Item>\n      </Menu>\n    </div >\n  )\n}\n\n// Proptypes\nChatView.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nexport default ChatView\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst InfoSection = ({ header, children }) => (\n  <>\n    <h4>\n      <strong>\n        {header}\n      </strong>\n    </h4>\n    <p>\n      {children}\n    </p>\n  </>\n)\n\nexport default InfoSection\n\nInfoSection.propTypes = {\n  header: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n}","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Popup, Icon, Grid } from 'semantic-ui-react'\n\nconst PopupLink = ({ name, githubUrl, linkedInUrl, email }) => (\n  <Popup\n    trigger={<span style={{ color: 'blue' }}>{name}</span>}\n    flowing\n    hoverable\n    hideOnScroll>\n    <Grid centered divided columns={3}>\n      <Grid.Column textAlign='center'>\n        <a href={githubUrl} target='_blank' rel='noopener noreferrer'>\n          <Icon color='black' size='large' name='github' />\n        </a>\n      </Grid.Column>\n      <Grid.Column textAlign='center'>\n        <a href={linkedInUrl} target='_blank' rel='noopener noreferrer'>\n          <Icon color='blue' size='large' name='linkedin' />\n        </a>\n      </Grid.Column>\n      <Grid.Column textAlign='center'>\n        <Popup\n          trigger={\n            <a href={`mailto:${email}?Subject=About%20Kaste 2.0`}>\n              <Icon color='green' size='large' name='at' />\n            </a>}>\n          tommi.teetee@hotmail.com\n        </Popup>\n\n      </Grid.Column>\n    </Grid>\n  </Popup>\n)\n\nPopupLink.propTypes = {\n  name: PropTypes.string.isRequired,\n  githubUrl: PropTypes.string.isRequired,\n  linkedInUrl: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n}\n\nexport default PopupLink","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Container, Header, Divider, Segment, List } from 'semantic-ui-react'\n// Components\nimport InfoSection from './InfoSection'\nimport PopupLink from './PopupLink'\n\nconst headerStyle = {\n  fontSize: 18\n}\n\nconst AboutView = ({ show }) => {\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <div style={{\n      height: '100%',\n      overflowY: 'scroll',\n      paddingBottom: 25\n    }}>\n      <Container textAlign='left' style={{ fontSize: 16 }}>\n        <Header textAlign='center' as='h1' style={{ paddingTop: 25, margin: 0 }}>\n          About Kaste 2.0 <span role='img' aria-label='seedling'>🌱</span>\n        </Header>\n\n        <h3 style={headerStyle}>Aim:</h3>\n        <p>Design and implement a responsive web app to monitor and water plants.</p>\n\n\n        <h3 style={headerStyle}>Features:</h3>\n        <ul>\n          <li>Plantwatering functionality for two or more users</li>\n          <li>Possibility to read plant info through charts</li>\n          <li>Simple chat</li>\n          <li>Rebooting Raspberry (that controls sensor data)</li>\n        </ul>\n\n        <Segment style={{ background: 'lightgreen' }}>\n          <p>\n            Any questions, tips, feedback or bug reports are much appreciated! Just\n            post them in the chat or tommi.teetee@hotmail.com <span role='img' aria-label='happy smiley'>🙂</span>\n          </p>\n        </Segment>\n\n        <h4 style={headerStyle}>Made by:</h4>\n        <PopupLink\n          name={'Tommi Tampio'}\n          linkedInUrl={'https://www.linkedin.com/in/tommi-tampio-41b2b7113/'}\n          githubUrl={'https://github.com/stutommi'}\n          email={'tommi.teetee@hotmail.com'}\n        />\n        <span> - Web app</span>\n        <br />\n        <span>Matti Tampio - Raspberry / sensor configuration</span>\n\n        <Divider section />\n\n        <h3 style={headerStyle}>Get started:</h3>\n        <List ordered>\n          <List.Item>Navigate to settings from menu</List.Item>\n          <List.Item>Provide an url that serves sensor data</List.Item>\n          <List.Item>Navigate to &quot;Sensors&quot;-view to check sensor measurements</List.Item>\n          <List.Item>Use features (watering, live feed) from the menu</List.Item>\n          <List.Item>Use that chat if you dare <span role='img' aria-label='devil'>👻</span></List.Item>\n\n        </List>\n\n        <Divider section />\n\n        <h3 style={headerStyle}>Client:</h3>\n\n        <p>\n          <a\n            target='_blank'\n            rel='noopener noreferrer'\n            href='https://github.com/stutommi/kaste_2.0-frontend'>\n            Link to code\n          </a>\n        </p>\n\n        <p>Working with token based authetication, client side is done with React.\n          Its state is managed with hooks for the most part and little with\n          Apollos client. Layout is handled with inline styles and semantic-ui-react.\n          Communication between client and server is done with Graphql.\n\n        </p>\n        <InfoSection header={'Layout and Menus'}>\n          Kastes layout is designed mobile first, but should work in every screen size.\n          Mobile menu has a fixed menu on top with logout and togglable sidebar,\n          which contains view navigation and functionality. When screen size goes\n          over mobile, the view changes to a fixed top menu, which displays navigation and\n          functionality.\n        </InfoSection>\n        <InfoSection header={'Sensors'}>\n          Sensors data is shown in sensors view. It shows the current value of sensor\n            measurements and chart information on measurement history that can be shown by\n            different time ranges. clicking on the leaf icon in plant sensors opens a new tab\n            in wikipedia, showing the results matching the name of the plant.\n        </InfoSection>\n        <InfoSection header={'Chat'}>\n          Kaste has a supersimple chat. Users can write and receive messages on realtime\n            thanks to subscription based communication with server. Messages are stored in MongoDB.\n        </InfoSection>\n        <InfoSection header={'Settings'}>\n          In order to see any sensor information, user needs to be connected to an endpoint\n            that serves that information. This connection can be made in settings page. If\n            client is able to connect to an endpoint provided by the user, it will start displaying\n            and storing that information on database. Settings page also shows the status of the endpoint\n        </InfoSection>\n        <InfoSection header={'Live Feed'}>\n          If the endpoint a user is connected to has a camera connection, users are able to monitor\n            this connection through the &quot;Live Feed&quot; view. This is useful when you want to make sure\n            that your plants are being watered after using watering functionality. Note that if you have a slow internet\n            connection, the picture may refresh much slower (or completely), but the watering funcionality still works.\n        </InfoSection>\n        <InfoSection header={'Water Plants'}>\n          Perhaps the most important feature of Kaste is its watering functionality. Provided that the\n          watering mechanics are hooked correctly at users home, user is able to water their plants\n          by pressing the &quot;Water Plants&quot; found on the menu. They are able to choose watering between durations\n          of 1, 5 and 10 minutes. If there&quot;s a need to stop the watering process for whatever reasons,\n          user can simply press &quot;Stop Watering&quot; found next to watering functionality.\n        </InfoSection>\n\n        <Divider section />\n\n        <h3 style={headerStyle}>Server:</h3>\n\n        <p>\n          <a\n            target='_blank'\n            rel='noopener noreferrer'\n            href='https://github.com/stutommi/kaste_2.0-backend'>\n            Link to code\n          </a>\n        </p>\n\n        <p>Servers main two tasks are handling Graphql requests coming from client and storing\n          collecting and storing messages, user information and sensor data to mongoDB. It is important\n          to note that all requests that client sends to other URLs go through the server. this is done to avoid\n          mixed content warning that comes from making direct requests from Kaste (https) to sensor endpoints\n          (possibly http).\n        </p>\n        <InfoSection header={'User information'}>\n          User information contains name, username, password hash and an endpoint for sensordata.\n          When ever a new endpoint is introduced, server logic will start fetching information from\n          the endpoint.\n        </InfoSection>\n        <InfoSection header={'Messages'}>\n          Messages are stored in MongoDB and used in the chat view of the client. It uses a subscription\n          so any new message is delivered to chat in realtime without refreshing the page. Currently the\n          message live forever in the DB without manual deletion, this could be changed in the future to last\n          only a certain time.\n        </InfoSection>\n        <InfoSection header={'Sensor data'}>\n          Servers two jobs for sensor data is to relay realtime sensor values and functionality to client\n          and store values from all connected endpoints to database. These jobs are not connected to each other\n          in any way. Server is always on update with all sensor endpoints of every user and fetches data from them\n          at certain interval. If nobody is using an endpoint anymore, server stops fetching and storing data from it.\n        </InfoSection>\n\n        <Segment color='yellow'>\n          Known issues:\n          <ul>\n            <li>Endpoint computer might not recover from reboot</li>\n            <li>Loading component renders over menu</li>\n            <li>Live feed can freeze with slow internet connection</li>\n          </ul>\n        </Segment>\n\n        <Segment color='green'>\n          Things to improve:\n          <ul>\n            <li>Clean codebase</li>\n            <li>More tests</li>\n            <li>More comments</li>\n            <li>Improve Chat (amount of initial messages)</li>\n            <li>Add auto-watering feature</li>\n            <li>Add feature to email user when plant is dry</li>\n          </ul>\n        </Segment>\n\n      </Container>\n    </div>\n  )\n}\n\n// Proptypes\nAboutView.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nexport default AboutView","import { gql } from 'apollo-boost'\n\nconst editUserSensorEndpoint = gql`\nmutation editUserSensorEndpoint(\n  $sensorEndpoint: String!\n  ) {\n    editUserSensorEndpoint(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    sensorEndpoint\n    name\n    username\n  }\n}\n`\n\nexport default editUserSensorEndpoint","import { gql } from 'apollo-boost'\n\nconst reboot = gql`\nmutation reboot(\n  $sensorEndpoint: String!\n  ) {\n    reboot(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default reboot","import { gql } from 'apollo-boost'\n\nconst validateSensorEndpoint = gql`\nmutation validateSensorEndpoint(\n  $sensorEndpoint: String!\n  ) {\n    validateSensorEndpoint(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default validateSensorEndpoint","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Input, Segment, Header, Divider, Message, Grid } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\n// Custom hooks\nimport { useField } from '../hooks/useField'\nimport { useNotification } from '../hooks/useNotification'\nimport { useAction } from '../hooks/useAction'\n// TypeDefs\nimport editUserSensorEndpoint from '../graphql/mutations/editUserSensorEndpoint'\nimport reboot from '../graphql/mutations/reboot'\nimport validateSensorEndpoint from '../graphql/mutations/validateSensorEndpoint'\n// Helper functions\nimport { handleSensorEndpointUpdateForToken } from '../utilities/helperFuncs'\n\nconst SensorUrlForm = ({ sensorsConnected, token, setToken, actions, sensorService }) => {\n  const { reset: resetSensorUrl, ...sensorUrl } = useField('text')\n  const [notification, setNotification] = useNotification()\n  const [editSensorEndpoint] = useMutation(editUserSensorEndpoint)\n  const fireAction = useAction()\n\n  // Handles connection to sensor endpoint\n  const handleConnect = async () => {\n    try {\n      const { data } = await fireAction(sensorUrl.value, validateSensorEndpoint)\n\n      if (data.validateSensorEndpoint.message === 'Valid endpoint') {\n        const confirmation = window.confirm('Would you like to receive information about these sensors?')\n\n        if (confirmation) {\n          editSensorEndpoint({\n            variables: {\n              sensorEndpoint: sensorUrl.value\n            }\n          })\n\n          // For localstorage and app\n          handleSensorEndpointUpdateForToken(sensorUrl.value, setToken)\n          // Clears url field\n          resetSensorUrl()\n        }\n      }\n    } catch (error) {\n      setNotification('Sensor endpoint offline or invalid URL')\n    }\n  }\n\n  // Clears sensor url from DB for the current user\n  const handleClearUrl = () => {\n    const confirmation = window.confirm('Are you sure? Clearing sensor resource url cuts access to all information and functionality.')\n\n    if (confirmation) {\n      editSensorEndpoint({\n        variables: {\n          sensorEndpoint: ''\n        }\n      })\n\n      handleSensorEndpointUpdateForToken('', setToken)\n    }\n  }\n\n  // Reboots sensor endpoint computer\n  const handleReboot = async () => {\n    const confirmation = window.confirm('WARNING: Endpoint computer might not recover correctly from reboot!')\n\n    if (confirmation) {\n      fireAction(actions.reboot, reboot)\n\n      sensorService.stopFetching()\n\n      // Waits that computer has had time to shutdown\n      setTimeout(() => {\n        sensorService.startFetching(token.sensorEndpoint)\n      }, 5000)\n    }\n\n  }\n\n  return (\n    <Segment>\n      <Header>\n        Sensor resource URL\n      </Header>\n      <small style={{ color: 'gray' }}>\n        Provide an endpoint URL where sensor output comes from\n      </small>\n      <Input\n        {...sensorUrl}\n        data-cy='sensor-url-input'\n        fluid\n        placeholder='Enter URL...'\n        action={\n          <Button\n            data-cy='sensor-url-button'\n            loading={false}\n            onClick={handleConnect}>\n            Connect\n          </Button>\n        }\n      />\n      {\n        token.sensorEndpoint\n          ?\n          <>\n            <Segment color={'green'}>\n              <Header as='h3'>\n                connected at:\n              </Header>\n              {token.sensorEndpoint}\n              <Button\n                fluid\n                style={{ marginTop: 10 }}\n                onClick={handleClearUrl}>\n                clear\n              </Button>\n            </Segment>\n            <Segment\n              inverted\n              secondary\n              color={sensorsConnected ? 'green' : 'red'}>\n              <Grid divided columns={2} textAlign='center'>\n                <Grid.Row verticalAlign='middle'>\n                  <Grid.Column>\n                    Endpoint status: {sensorsConnected ? 'Online' : 'Offline'}\n                  </Grid.Column>\n                  <Grid.Column>\n                    <Button\n                      disabled={!sensorsConnected}\n                      onClick={handleReboot}\n                      icon='redo'\n                      content='Reboot' />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Segment>\n          </>\n          :\n          <Segment color={'red'}>\n            Not connected\n          </Segment>\n      }\n      <Divider />\n      {notification &&\n        <Message color='red'>\n          {notification}\n        </Message>\n      }\n    </Segment>\n  )\n}\n\n// Proptypes\nSensorUrlForm.propTypes = {\n  sensorsConnected: PropTypes.bool.isRequired,\n  token: PropTypes.object.isRequired,\n  setToken: PropTypes.func.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default SensorUrlForm","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid } from 'semantic-ui-react'\n// Components\nimport SensorUrlForm from './SensorUrlForm'\n\nconst SettingsView = ({ show, sensorsConnected, token, setToken, actions, sensorService }) => {\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Grid divided='vertically'>\n      <Grid.Row>\n        <Grid.Column>\n          <SensorUrlForm\n            sensorsConnected={sensorsConnected}\n            token={token}\n            actions={actions}\n            sensorService={sensorService}\n            setToken={setToken} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\n// Proptypes\nSettingsView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  setToken: PropTypes.func.isRequired,\n  sensorsConnected: PropTypes.bool,\n  token: PropTypes.object,\n  actions: PropTypes.object,\n  sensorService: PropTypes.object.isRequired,\n}\n\nexport default SettingsView","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Segment, Button } from 'semantic-ui-react'\n\nconst divStyle = {\n  height: '100%',\n  background: 'black',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}\n\nconst ImageError = ({ setReloadImage, setError }) => {\n  return (\n    <div style={divStyle}>\n      <div style={{ textAlign: 'center' }}>\n        <Icon name='frown' inverted color='grey' size='massive' />\n\n        <Segment\n          color='red'\n          inverted\n          secondary\n          compact>\n          <p style={{ color: 'white' }}>Image failed to load...</p>\n        </Segment>\n\n        <Button\n          data-cy='error-button'\n          circular\n          icon='redo'\n          onClick={async () => {\n            setError(false)\n            await setReloadImage(true)\n            setReloadImage(false)\n          }}>\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n// Proptypes\nImageError.propTypes = {\n  setReloadImage: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired\n}\n\nexport default ImageError","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Image } from 'semantic-ui-react'\n// Components\nimport Loading from './Loading'\nimport ImageError from './ImageError'\n\nconst divStyle = {\n  height: '100%',\n  background: 'black',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}\n\nconst VideoView = ({ show, actions }) => {\n  const [pending, setPending] = useState(true)\n  const [displayImage, setDisplayImage] = useState('block')\n  const [reloadImage, setReloadImage] = useState(false)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    setPending(true)\n    setDisplayImage('block')\n  }, [show, reloadImage])\n\n  if (!show || reloadImage) { return null }\n  if (error) { return <ImageError setReloadImage={setReloadImage} setError={setError} /> }\n\n  return (\n    <div style={divStyle}>\n\n      {pending && <Loading inverted={false} />}\n\n      <Image\n        style={{ maxWidth: 800, display: `${displayImage}` }}\n        centered\n        src={actions.camera}\n        fluid\n        onLoad={() => setPending(false)}\n        onError={() => {\n          setError(true)\n          setDisplayImage('none')\n        }}\n      />\n\n    </div>\n  )\n}\n\n// Proptypes\nVideoView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  actions: PropTypes.object\n}\n\nexport default VideoView","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport { useApolloClient } from '@apollo/react-hooks'\n// Custom hooks\nimport { useSensors } from './hooks/useSensors'\n// Components\nimport ResponsiveLayout from './components/ResponsiveLayout'\nimport LoginView from './components/LoginView'\nimport SensorView from './components/SensorView'\nimport ChatView from './components/ChatView'\nimport AboutView from './components/AboutView'\nimport SettingsView from './components/SettingsView'\nimport VideoView from './components/VideoView'\n\nconst App = () => {\n  const [page, setPage] = useState('About')\n  const [token, setToken] = useState(JSON.parse(localStorage.getItem('kaste-user-token')))\n  const [sensorData, actions, sensorService, sensorsConnected, sensorError] = useSensors(30) // update interval (in seconds)\n  const client = useApolloClient()\n\n  useEffect(() => {\n    if (token && token.sensorEndpoint) {\n      sensorService.startFetching(token.sensorEndpoint)\n    } else {\n      sensorService.stopFetching()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token])\n\n  const logOut = () => {\n    setPage('Settings')\n    sensorService.stopFetching()\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  if (!token) return <LoginView setToken={setToken} />\n    \n  return (\n    <ResponsiveLayout\n      page={page}\n      setPage={setPage}\n      logOut={logOut}\n      actions={actions}\n      token={token}\n      sensorService={sensorService}\n    >\n\n      <SensorView\n        token={token}\n        sensorData={sensorData}\n        sensorError={sensorError}\n        show={page === 'Sensors'}\n      />\n\n      <ChatView\n        show={page === 'Chat'}\n      />\n\n      <AboutView\n        show={page === 'About'}\n      />\n\n      <SettingsView\n        show={page === 'Settings'}\n        sensorsConnected={sensorsConnected}\n        token={token}\n        setToken={setToken}\n        actions={actions}\n        sensorService={sensorService}\n      />\n\n      <VideoView\n        show={page === 'Video'}\n        token={token}\n        actions={actions}\n      />\n    </ResponsiveLayout>\n  )\n}\n\nexport default App\n\n","// Libraries\nimport { useState } from 'react'\nimport { useApolloClient } from '@apollo/react-hooks'\n// Helper functions\nimport { formatSensorData } from '../utilities/helperFuncs'\n// Typedefs\nimport sensorDatas from '../graphql/queries/sensorData'\n// NOTE: Really weirdly, importing as sensorData results in Graphql error\n\n// Handle sensor information fetching\n// Provide interval as argument (seconds)\nexport const useSensors = (duration = 60) => {\n  const [sensorData, setSensorData] = useState(null)\n  const [actions, setActions] = useState(null)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useState(null)\n  const [intervalId, setIntervalId] = useState(null)\n  const client = useApolloClient()\n\n  const getSensorData = async (url) => {\n    try {\n      const { data } = await client.query({\n        query: sensorDatas,\n        variables: { sensorEndpoint: url },\n        fetchPolicy: 'no-cache'\n      })\n\n      const parsedSensorQuery = JSON.parse(data.sensorData.value)\n\n      // Format sensor data with helper function\n      setSensorData(formatSensorData(parsedSensorQuery.sensors))\n      // Get actions\n      setActions(parsedSensorQuery.actions)\n      setIsConnected(true)\n      setError(null)\n\n    } catch (error) {\n      setIsConnected(false)\n      setError(error.message)\n      setTimeout(() => {\n\n        getSensorData(url)\n      }, 2000)\n    }\n  }\n\n  const startFetching = (url) => {\n    getSensorData(url)\n    const id = setInterval(() => {\n      getSensorData(url)\n    }, duration * 1000)\n    setIntervalId(id)\n  }\n\n  const stopFetching = () => {\n    clearInterval(intervalId)\n    setSensorData(null)\n    setIsConnected(false)\n    setActions(null)\n  }\n\n  const sensorService = {\n    startFetching,\n    stopFetching\n  }\n\n\n  return [sensorData, actions, sensorService, isConnected, error]\n}","//Libraries\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from '@apollo/react-hooks'\n// ...Because of authorization for headers (instead of apollo-boost)\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n// ...For Subscriptions (websocket)\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n// Utilities\nimport config from './utilities/config'\n// Components\nimport App from './App'\n\nconst wslink = new WebSocketLink({\n  uri: config.wsUrl,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: config.httpUrl\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = JSON.parse(localStorage.getItem('kaste-user-token'))\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token.value}` : null\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wslink,\n  authLink.concat(httpLink),\n)\n\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'))"],"sourceRoot":""}