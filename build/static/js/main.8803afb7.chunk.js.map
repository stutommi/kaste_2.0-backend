{"version":3,"sources":["utilities/config.js","utilities/helperFuncs.js","graphql/queries/sensorData.js","hooks/useSensors.js","hooks/useAction.js","graphql/mutations/startWatering.js","components/WateringModal.js","graphql/mutations/stopWatering.js","components/MobileContainer.js","components/DesktopContainer.js","components/ResponsiveLayout.js","graphql/mutations/loginUser.js","graphql/queries/currentUser.js","hooks/useNotification.js","components/LoginView.js","components/Loading.js","components/SensorValue.js","graphql/queries/chartData.js","components/Chart.js","components/PlantSensor.js","components/HouseSensor.js","components/SensorView.js","graphql/queries/chatMessages.js","graphql/mutations/createMessage.js","graphql/subscriptions/messageAdded.js","components/ChatMessage.js","components/ChatView.js","components/AboutView.js","graphql/mutations/editUserSensorEndpoint.js","graphql/mutations/reboot.js","components/SensorUrlForm.js","components/SettingsView.js","components/ImageError.js","components/VideoView.js","App.js","index.js"],"names":["config","wsUrl","httpUrl","includedIn","set","object","map","p","id","includes","formatSensorData","sensorData","filteredArray","Object","values","reduce","acc","cur","concat","filter","sensor","model","length","Error","handleSensorEndpointUpdateForToken","sensorUrlField","setToken","prevToken","JSON","parse","localStorage","getItem","removeItem","updatedToken","objectSpread","sensorEndpoint","window","setItem","stringify","gql","_templateObject","useSensors","duration","arguments","undefined","_useState","useState","_useState2","slicedToArray","setSensorData","_useState3","_useState4","actions","setActions","_useState5","_useState6","isConnected","setIsConnected","_useState7","_useState8","error","setError","_useState9","_useState10","intervalId","setIntervalId","client","useApolloClient","getSensorData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","url","_ref2","data","parsedSensorQuery","wrap","_context","prev","next","query","sensorDatas","variables","fetchPolicy","sent","value","sensors","t0","message","setTimeout","stop","_x","apply","this","startFetching","console","log","setInterval","stopFetching","clearInterval","useAction","actionUrl","mutation","mutate","startWatering","startWatering_templateObject","WateringModal","wateringConnected","setPage","showModal","setShowModal","recentlyWatered","setRecentlyWatered","fireAction","handleWatering","action","react_default","createElement","Modal","centered","basic","open","onClose","trigger","Menu","Item","data-cy","onClick","disabled","Icon","name","style","textAlign","size","Header","content","icon","Actions","marginTop","Button","Group","color","water","oneMin","Or","fiveMin","tenMin","stopWatering","stopWatering_templateObject","MobileContainer","children","logOut","page","token","sensorService","showSidebar","setShowSidebar","cameraConnected","setCameraConnected","setRaspConnected","setWateringConnected","handleViewChange","view","useEffect","camera","reboot","Fragment","Responsive","maxWidth","onlyMobile","as","Sidebar","Pushable","height","animation","inverted","onHide","vertical","visible","width","username","components_WateringModal","waterstop","Pusher","dimmed","widths","pointing","marginBottom","borderRadius","alignSelf","header","position","DesktopContainer","minWidth","onlyTablet","fixed","margin","ResponsiveLayout","components_MobileContainer","components_DesktopContainer","loginUser","loginUser_templateObject","currentUser","currentUser_templateObject","useNotification","text","setText","LoginView","login","useMutation","_useNotification","_useNotification2","notification","setNotification","setUsername","password","setPassword","handleLogin","update","result","refetchQueries","graphQLErrors","className","Grid","background","verticalAlign","Column","dividing","Form","onSubmit","Segment","stacked","raised","Input","type","onChange","_ref3","target","fluid","iconPosition","placeholder","_ref4","Message","negative","Loading","Dimmer","active","Loader","SensorValue","iconColor","fontSize","chartData","chartData_templateObject","options","layout","padding","bottom","scales","xAxes","ticks","autoSkip","maxTicksLimit","yAxes","suggestedMin","max","Chart","chartTimeRange","plantData","useQuery","toUpperCase","range","loading","minHeight","components_Loading","keys","secondary","formattedChartData","labels","time","moment","utc","local","format","subtract","fromNow","returnLineColor","measure","datasets","push","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","formatSensorDataIntoChartData","es","legend","display","PlantSensor","chartVisible","setChartVisible","setChartTimeRange","columns","Row","soil_moisture","components_SensorValue","Math","floor","light","temperature_C","nutrient","circular","components_Chart","battery_low","HouseSensor","location","humidity","SensorView","show","sensorError","overflowY","components_PlantSensor","key","components_HouseSensor","chatMessages","chatMessages_templateObject","createMessage","createMessage_templateObject","messageAdded","messageAdded_templateObject","ChatMessage","me","defSegColor","user","defFloatSide","segmentStyle","float","clear","Comment","paddingTop","overflow","compact","Content","Author","Metadata","Date","parseInt","created","toLocaleString","Divider","ChatView","_useQuery","userQuery","messageInput","setMessageInput","addMessage","el","useRef","scrollToBottom","useSubscription","onSubscriptionData","subscriptionData","messageData","readQuery","addedMessage","messages","writeQuery","current","scrollIntoView","block","behavior","handleSubmit","Container","components_ChatMessage","ref","onKeyPress","onFocus","justifyContent","AboutView","Table","editUserSensorEndpoint","editUserSensorEndpoint_templateObject","reboot_templateObject","SensorUrlForm","sensorsConnected","setSensorUrlField","editSensorEndpoint","handleConnect","response","axios","get","confirm","handleReboot","_callee2","_context2","divided","SettingsView","components_SensorUrlForm","ImageError","setReloadImage","divStyle","alignItems","VideoView","imageStatus","setImageStatus","displayImage","setDisplayImage","reloadImage","Image","src","onLoad","onError","components_ImageError","App","_useSensors","_useSensors2","components_ResponsiveLayout","resetStore","components_SensorView","components_ChatView","components_AboutView","components_SettingsView","components_VideoView","components_LoginView","wslink","WebSocketLink","uri","reconnect","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8803afb7.chunk.js","sourcesContent":["let wsUrl = 'ws://localhost:4000/graphql'\nlet httpUrl = 'http://localhost:4000/graphql'\n\nif (process.env.NODE_ENV === 'production') {\n  wsUrl = 'wss://lit-forest-54340.herokuapp.com/graphql'\n  httpUrl = 'https://lit-forest-54340.herokuapp.com/graphql'\n}\n\nexport default { wsUrl, httpUrl }","export const includedIn = (set, object) =>\n  set.map(p => p.id).includes(object.id)\n\n// Sensor data comes in two objects. they need to be merged into one one array\nexport const formatSensorData = (sensorData) => {\n  const values = Object.values(sensorData)\n  const flattenedArray = values.reduce((acc, cur) => cur.concat(acc))\n  // Some sensors might show empty values because they're not online yet\n  // so they need to be filtered out.\n  const filteredArray = flattenedArray.filter(sensor => sensor.model !== '')\n\n  if (filteredArray.length === 0) {\n    throw new Error('Sensors loading')\n  }\n\n  return filteredArray\n}\n\n// Sets new url endpoint to localstorage\nexport const handleSensorEndpointUpdateForToken = (sensorUrlField, setToken) => {\n  const prevToken = JSON.parse(localStorage.getItem('kaste-user-token'))\n  localStorage.removeItem('kaste-user-token')\n\n  const updatedToken = {\n    ...prevToken,\n    sensorEndpoint: sensorUrlField\n  }\n\n  window.localStorage.setItem('kaste-user-token', JSON.stringify(updatedToken))\n  setToken(updatedToken)\n}\n\n\nexport default { includedIn, formatSensorData, handleSensorEndpointUpdateForToken }","import { gql } from 'apollo-boost'\n\nconst sensorData = gql`\n  query SensorData($sensorEndpoint: String!) {\n  sensorData (sensorEndpoint: $sensorEndpoint){\n    value\n  }\n}\n`\n\nexport default sensorData","// Libraries\nimport { useState } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\n// Helper functions\nimport { formatSensorData } from '../utilities/helperFuncs'\n// Typedefs\nimport sensorDatas from '../graphql/queries/sensorData'\n// NOTE: Really weirdly, importing as sensorData results in Graphql error\n\n// Handle sensor information fetching\n// Provide duration as argument (seconds)\nexport const useSensors = (duration = 60) => {\n  const [sensorData, setSensorData] = useState(null)\n  const [actions, setActions] = useState(null)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useState(null)\n  const [intervalId, setIntervalId] = useState(null)\n  const client = useApolloClient()\n\n  const getSensorData = async (url) => {\n    try {\n      // TÄÄ PALVELIMEN KAUTTA\n      const { data } = await client.query({\n        query: sensorDatas,\n        variables: { sensorEndpoint: url },\n        fetchPolicy: 'no-cache'\n      })\n      const parsedSensorQuery = JSON.parse(data.sensorData.value)\n\n      // Format sensor data with helper function\n      setSensorData(formatSensorData(parsedSensorQuery.sensors))\n      // Get actions\n      setActions(parsedSensorQuery.actions)\n      setIsConnected(true)\n      setError(null)\n\n    } catch (error) {\n      setIsConnected(false)\n      setError(error.message)\n      setTimeout(() => {\n\n        getSensorData(url)\n      }, 2000);\n    }\n  }\n\n  const startFetching = (url) => {\n    console.log('fetching...')\n    getSensorData(url)\n    const id = setInterval(() => {\n      console.log('fetching...')\n      getSensorData(url)\n    }, duration * 1000);\n    setIntervalId(id)\n  }\n\n  const stopFetching = () => {\n    clearInterval(intervalId)\n    setSensorData(null)\n    setIsConnected(false)\n    setActions(null)\n  }\n\n  const sensorService = {\n    startFetching,\n    stopFetching\n  }\n\n\n  return [sensorData, actions, sensorService, isConnected, error]\n}\n\nexport default useSensors ","import { useApolloClient } from 'react-apollo-hooks'\n\n// Fires sensoractions, requires url and mutation as arguments\nconst useAction = () => {\n  const client = useApolloClient()\n\n  const fireAction = (actionUrl, mutation) => {    \n    client.mutate({\n      mutation: mutation,\n      variables: {sensorEndpoint: actionUrl}\n    })\n  }\n\n  return fireAction\n}\n\nexport default useAction","import { gql } from 'apollo-boost'\n\nconst startWatering = gql`\nmutation startWatering(\n  $sensorEndpoint: String!\n  ) {\n    startWatering(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default startWatering","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal, Button, Icon, Menu, Header } from 'semantic-ui-react'\nimport axios from 'axios'\n// Custom hooks\nimport useAction from '../hooks/useAction'\n// Typedefs\nimport startWatering from '../graphql/mutations/startWatering'\n\nconst WateringModal = ({ actions, wateringConnected, setPage }) => {\n  const [showModal, setShowModal] = useState(false)\n  const [recentlyWatered, setRecentlyWatered] = useState(false)\n  const fireAction = useAction()\n\n  const handleWatering = (duration, action) => {\n    setRecentlyWatered(true)\n    console.log('Watering plants plants: ', duration)\n    try {\n      setShowModal(false)\n      fireAction(action, startWatering)\n      setPage('Video')\n    } catch (error) {\n      console.error(error.message)\n    }\n\n    setTimeout(() => {\n      setRecentlyWatered(false)\n      console.log('Watering completed')\n\n    }, duration * 1000 * 60)\n  }\n\n  return (\n    <Modal\n      centered\n      basic\n      open={showModal}\n      onClose={() => setShowModal(false)}\n      trigger={\n        <Menu.Item\n          data-cy='water-button'\n          onClick={() => setShowModal(true)}\n          disabled={!wateringConnected || recentlyWatered}>\n          <Icon name='shower' />\n          Water Plants\n        </Menu.Item>\n      }\n      style={{\n        textAlign: 'center'\n      }}>\n      <Icon name='shower' size='massive' />\n      <Header content='Choose watering duration:' icon='clock' />\n      <Modal.Actions style={{ textAlign: 'center', marginTop: 15 }}>\n        <Button.Group>\n          <Button \n          data-cy='modal-button-1min'\n          color='green'\n          onClick={() => handleWatering(1, actions.water.oneMin)}>\n            1 min\n          </Button>\n          <Button.Or />\n          <Button\n          data-cy='modal-button-5min'\n          color='green'\n          onClick={() => handleWatering(5, actions.water.fiveMin)}>\n            5 min\n          </Button>\n          <Button.Or />\n          <Button\n          data-cy='modal-button-10min'\n          color='green'\n          onClick={() => handleWatering(10, actions.water.tenMin)}>\n            10 min\n          </Button>\n        </Button.Group>\n        <Button\n          data-cy='modal-button-cancel'\n          color='red'\n          onClick={() => setShowModal(false)}\n          style={{ marginTop: 20 }}>\n          cancel\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\n// Proptypes\nWateringModal.propTypes = {\n  actions: PropTypes.object,\n  wateringConnected: PropTypes.bool.isRequired,\n  setPage: PropTypes.func.isRequired\n}\n\nexport default WateringModal","import { gql } from 'apollo-boost'\n\nconst stopWatering = gql`\nmutation stopWatering(\n  $sensorEndpoint: String!\n  ) {\n    stopWatering(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default stopWatering","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Responsive, Sidebar, Menu, Icon } from 'semantic-ui-react'\nimport axios from 'axios'\n// Components\nimport WateringModal from './WateringModal'\n// Custom hooks\nimport useAction from '../hooks/useAction'\n// Typedefs\nimport stopWatering from '../graphql/mutations/stopWatering'\n\n\nconst MobileContainer = ({ children, setPage, logOut, page, actions, token, sensorService }) => {\n  const [showSidebar, setShowSidebar] = useState(false)\n  const [cameraConnected, setCameraConnected] = useState(false)\n  const [raspConnected, setRaspConnected] = useState(false)\n  const [wateringConnected, setWateringConnected] = useState(false)\n  const fireAction = useAction()\n\n  // Handles page navigation\n  const handleViewChange = (view) => () => {\n    setShowSidebar(false)\n    setPage(view)\n  }\n\n  // Stops watering\n  const handleStopWatering = () => {\n    setShowSidebar(false)\n    fireAction(actions.water.waterstop, stopWatering)\n  }\n\n  // Check if sensor actions include camera or watering functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setRaspConnected(actions.reboot !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setRaspConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  return (\n    <>\n      <Responsive\n        maxWidth={Responsive.onlyMobile.maxWidth}\n        as={Sidebar.Pushable}\n        style={{ height: '100vh' }}\n      >\n        <Sidebar\n          as={Menu}\n          animation='push'\n          inverted\n          onHide={() => setShowSidebar(false)}\n          vertical\n          visible={showSidebar}\n          icon='labeled'\n          width='thin'\n        >\n          {token &&\n            <Menu.Header as='small' style={{ color: 'white' }}>\n              <Icon name='user' color='green' />\n              {token.username}\n            </Menu.Header>\n          }\n          <Menu.Item\n            data-cy='sensors-button'\n            onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='chat-button'\n            onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='settings-button'\n            onClick={handleViewChange('Settings')}>\n            <Icon name='settings' />\n            Settings\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='about-button'\n            onClick={handleViewChange('About')}>\n            <Icon name='question' />\n            About\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='livefeed-button'\n            disabled={!cameraConnected}\n            onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n\n          <WateringModal\n            actions={actions}\n            wateringConnected={wateringConnected}\n            setPage={setPage}\n          />\n\n          <Menu.Item\n            data-cy='stop-button'\n            disabled={!wateringConnected}\n            onClick={handleStopWatering}>\n            <Icon name='stop circle' />\n            Stop Watering\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher style={{ height: '100%' }} dimmed={showSidebar}>\n\n          <Menu widths={3} inverted pointing color='green' size='large' style={{ height: '50px', marginBottom: 0, borderRadius: 0 }}>\n            <Menu.Item onClick={() => setShowSidebar(true)} style={{ alignSelf: 'center' }}>\n              <Icon data-cy='sidebar-button' name='sidebar' />\n            </Menu.Item>\n            <Menu.Item header={true}>\n              {page}\n            </Menu.Item>\n            <Menu.Item position='right' onClick={() => logOut()} style={{ alignSelf: 'center' }}>\n              <Icon name='log out' />\n            </Menu.Item>\n          </Menu>\n\n          <div style={{ height: 'calc(100vh - 50px)' }}>\n            {children}\n          </div>\n\n        </Sidebar.Pusher>\n      </Responsive>\n    </>\n  )\n}\n\n// Proptypes\nMobileContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default MobileContainer","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Responsive, Menu, Icon } from 'semantic-ui-react'\nimport axios from 'axios'\n// Components\nimport WateringModal from './WateringModal'\n// Custom hooks\nimport useAction from '../hooks/useAction'\n// Typedefs\nimport stopWatering from '../graphql/mutations/stopWatering'\n\nconst DesktopContainer = ({ children, setPage, logOut, actions, token, sensorService }) => {\n  const [cameraConnected, setCameraConnected] = useState(false)\n  const [wateringConnected, setWateringConnected] = useState(false)\n  const fireAction = useAction()\n\n  // Handles page navigation\n  const handleViewChange = (view) => () => {\n    setPage(view)\n  }\n\n  // Stops watering\n  const handleStopWatering = () => {\n    fireAction(actions.water.waterstop, stopWatering)\n  }\n\n  // Check if sensor actions include camera or watering functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  return (\n    <>\n      <Responsive\n        style={{ height: '100vh' }}\n        minWidth={Responsive.onlyTablet.minWidth}\n      >\n        <Menu\n          style={{ height: 71 }}\n          inverted\n          icon='labeled'\n          color='green'\n          fixed='top'\n        >\n\n          <Menu.Item\n            data-cy='sensors-button'\n            onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='chat-button'\n            onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n\n          <WateringModal\n            actions={actions}\n            wateringConnected={wateringConnected}\n            setPage={setPage}\n          />\n\n          <Menu.Item\n            data-cy='stop-button'\n            disabled={!wateringConnected}\n            onClick={handleStopWatering}>\n            <Icon name='stop circle' />\n            Stop Watering\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='livefeed-button'\n            disabled={!cameraConnected}\n            onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n\n          <Menu.Menu position='right'>\n            {token &&\n              <Menu.Header as='p' style={{ color: 'white', alignSelf: 'center', margin: '0 10px 0' }}>\n                <Icon name='user' />\n                {token.username} <br />\n                logged in\n              </Menu.Header>\n            }\n\n            <Menu.Item\n              data-cy='settings-button'\n              onClick={handleViewChange('Settings')}>\n              <Icon name='settings' />\n              Settings\n            </Menu.Item>\n\n            <Menu.Item\n              data-cy='about-button'\n              onClick={handleViewChange('About')}>\n              <Icon name='question' />\n              About\n            </Menu.Item>\n\n            <Menu.Item\n              data-cy='logout-button'\n              onClick={() => logOut(false)}>\n              <Icon name='log out' />\n              Log out\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n\n        <div style={{ height: 71 }} />\n        <div style={{ height: 'calc(100vh - 71px)' }}>\n          {children}\n        </div>\n\n      </Responsive>\n    </>\n  )\n}\n\n// Proptypes\nDesktopContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default DesktopContainer","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\n// Components\nimport MobileContainer from './MobileContainer'\nimport DesktopContainer from './DesktopContainer'\n\nconst ResponsiveLayout = ({ children, setPage, logOut, page, actions, token, sensorService }) => {\n\n  return (\n    <>\n      <MobileContainer // Mobile view\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}\n        sensorService={sensorService}>\n\n        {children}\n\n      </MobileContainer>\n\n      <DesktopContainer // Tablet - desktop view\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}\n        sensorService={sensorService}>\n\n        {children}\n\n      </DesktopContainer>\n    </>\n  )\n}\n\n// Proptypes\nResponsiveLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default ResponsiveLayout","import { gql } from 'apollo-boost'\n\nconst loginUser = gql`\nmutation loginUser(\n  $password: String!\n  $username: String!\n  ) {\n  login(\n    password: $password\n    username: $username\n  ) {\n    value\n    username\n    sensorEndpoint\n  }\n}\n`\n\nexport default loginUser","import { gql } from 'apollo-boost'\n\nconst currentUser = gql`\n{\n  me {\n    name\n    username\n    id\n    sensorEndpoint\n  }\n}\n`\n\nexport default currentUser","import React, { useState } from 'react'\n\n// Provide duration as argument (seconds)\nconst useNotification = (duration = 5) => {\n  const [text, setText] = useState(null)\n\n  const reset = () => setText(null)\n\n  const set = (text) => {\n    setText(text)\n    setTimeout(() => {\n      reset()\n    }, duration * 1000)\n  }\n\n  return [text, set]\n}\n\nexport default useNotification","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Message, Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\nimport { useMutation } from 'react-apollo-hooks'\n// Typedefs\nimport loginUser from '../graphql/mutations/loginUser'\nimport currentUser from '../graphql/queries/currentUser'\n// Hooks\nimport useNotification from '../hooks/useNotification'\n\n\nconst LoginView = ({ setToken }) => {\n  const login = useMutation(loginUser)\n  const [notification, setNotification] = useNotification()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleLogin = async () => {\n    try {\n      await login({\n        update: (client, result) => {\n          const token = result.data.login\n          setToken(token)\n          localStorage.setItem('kaste-user-token', JSON.stringify(token))\n        },\n        variables: {\n          username, password\n        },\n        refetchQueries: [{ query: currentUser }]\n      })\n    } catch (error) {\n      setNotification(error.graphQLErrors[0].message)\n    }\n  }\n\n  return (\n    <div className='login-form'>\n\n      <style> {`\n  body > div,\n  body > div > div,\n  body > div > div > div.login-form {\n    height: 100%;\n  }\n          `}\n      </style>\n\n      <Grid textAlign='center' style={{ height: '100%', background: 'lightgreen' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 250 }}>\n          <Header as='h1' color='grey' dividing textAlign='center'>\n            Log in to Kaste 2.0\n          </Header>\n          <Form size='large' onSubmit={handleLogin}>\n            <Segment stacked raised>\n              <Form.Input\n                data-cy='username'\n                type=\"text\"\n                value={username}\n                onChange={({ target }) => setUsername(target.value)}\n                fluid\n                icon='user'\n                iconPosition='left'\n                placeholder='Username'\n              />\n              <Form.Input\n                data-cy='password'\n                type=\"password\"\n                value={password}\n                onChange={({ target }) => setPassword(target.value)}\n                fluid\n                icon='lock'\n                iconPosition='left'\n                placeholder='Password'\n              />\n\n              <Button color='brown' size='large' type='submit'>\n                Log in\n              </Button>\n            </Segment>\n            {notification &&\n              <Message negative>\n                {notification}\n              </Message>\n            }\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\n// Proptypes\nLoginView.propTypes = {\n  setToken: PropTypes.func.isRequired\n}\n\nexport default LoginView","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nconst Loading = ({ inverted }) => (\n  <Dimmer inverted={inverted} active>\n    <Loader size='massive'>Loading</Loader>\n  </Dimmer>\n)\n\n// Proptypes\nLoading.propTypes = {\n  inverted: PropTypes.bool.isRequired\n}\n\nexport default Loading","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon } from 'semantic-ui-react'\n\nconst SensorValue = ({ value, icon, iconColor, size }) => {\n  return (\n    <div>\n      <Icon name={icon} size={size} color={iconColor ? iconColor : null} />\n      <span style={{\n        fontSize: `${size === 'big' ? '28px' : '11px'}`,\n        verticalAlign: 'middle'\n      }}>\n        {value}\n      </span>\n    </div>\n  )\n}\n\n// Proptypes\nSensorValue.propTypes = {\n  value: PropTypes.any,\n  icon: PropTypes.string.isRequired,\n  iconColor: PropTypes.string,\n  size: PropTypes.string.isRequired,\n}\n\nexport default SensorValue","import { gql } from 'apollo-boost'\n\nconst chartData = gql`\n  query ChartData($id: Int!, $type: HousePlant!, $range: DayWeekMonthYear!) {\n  chartData(id: $id, type: $type, range: $range) {\n    time\n    light\n    nutrient\n    soilMoisture\n    temperatureC\n    humidity\n  }\n}\n`\n\nexport default chartData","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Line } from 'react-chartjs-2'\nimport moment from 'moment'\nimport { Segment } from 'semantic-ui-react'\n// Type defs\nimport chartData from '../graphql/queries/chartData'\n// Components\nimport Loading from './Loading'\n\nconst formatSensorDataIntoChartData = ({ chartData }) => {\n\n  const formattedChartData = Object.keys(chartData)\n    .reduce((acc, cur) => {\n      if (cur === '__typename' || chartData[cur] === null) {\n        return acc\n      }\n\n      if (cur === 'time') {\n        acc.labels = chartData[cur].map(time => {\n\n          // If sensor data older than 1 day, format differently\n          if (moment() - time > 1000 * 60 * 60 * 24) {\n            return moment.utc(time).local().format('ddd hA')\n          }\n\n          // .fromNow doesn't seem to take UTC into account,\n          // this hacks it to show relative to finnish time\n          return moment(time).subtract(3, 'hours').fromNow(true)\n        })\n\n        return acc\n      }\n\n      const returnLineColor = (measure) => {\n        switch (measure) {\n          case 'temperatureC':\n            return 'rgba(250, 64, 61, 0.7)'\n          case 'nutrient':\n            return 'rgba(250, 158, 61, 0.7)'\n          case 'light':\n            return 'rgba(246, 250, 61, 0.7)'\n          case 'humidity':\n            return 'rgba(61, 152, 250, 0.7)'\n          case 'soilMoisture':\n            return 'rgba(61, 152, 250, 0.7)'\n          default: break\n        }\n      }\n\n      acc.datasets.push(\n        {\n          label: cur,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: returnLineColor(cur),\n          borderColor: returnLineColor(cur),\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: returnLineColor(cur),\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: returnLineColor(cur),\n          pointHoverBorderColor: returnLineColor(cur),\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: chartData[cur]\n        }\n\n      )\n\n      return acc\n    }, { labels: [], datasets: [] })\n\n  return formattedChartData\n}\n\nconst options = {\n  layout: {\n    padding: {\n      bottom: -20\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 5\n        }\n      }\n    ],\n    yAxes: [\n      {\n        ticks: {\n          suggestedMin: 0,\n          max: 100\n        }\n      }\n    ]\n  }\n}\n\nconst Chart = ({ sensor, chartTimeRange }) => {\n  const plantData = useQuery(chartData, {\n    variables: { id: sensor.id, type: sensor.type.toUpperCase(), range: chartTimeRange },\n    fetchPolicy: 'no-cache'\n  })\n\n  if (plantData.loading) {\n    return (\n      <div style={{ minHeight: 'calc(89vw / 2)' }}>\n        <Loading inverted={true} />\n      </div>\n    )\n  }\n\n  if (Object.keys(plantData.data).length === 0) {\n    return <Segment\n      color='red'\n      inverted\n      secondary>\n      Chart failed to load\n    </Segment>\n  }\n  const formattedChartData = formatSensorDataIntoChartData(plantData.data)\n\n  return (\n    <Line\n      data={formattedChartData}\n      options={options}\n      legend={{ display: false }} />\n  )\n}\n\n// Proptypes\nChart.propTypes = {\n  sensor: PropTypes.object.isRequired,\n  chartTimeRange: PropTypes.string.isRequired\n}\n\nexport default Chart","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid, Button, Header, Segment, Icon } from 'semantic-ui-react'\nimport moment from 'moment'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n\nconst PlantSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n\n  return (\n    <Segment\n      color='green'\n      inverted\n      secondary\n      style={{ margin: '2px 1px' }}>\n\n\n      <Header textAlign='center' as='h3'>\n        <Icon name='leaf' size='large' />\n        Capsicum baccatum\n      </Header>\n\n      <Grid textAlign='center' columns={2} >\n        <Grid.Row>\n\n          <Grid.Column color={sensor.soil_moisture < 10 ? 'yellow' : null}>\n            <SensorValue\n              size={'big'}\n              value={sensor.soil_moisture + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={Math.floor(sensor.light) + ' %'}\n              label={'Light'}\n              icon={'sun'}\n              iconColor={'yellow'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={Math.floor(sensor.nutrient) + ' %'}\n              label={'Nutrient'}\n              icon={'pills'}\n              iconColor={'orange'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button data-cy='chart-toggle-button' circular icon={chartVisible ? 'close' : 'chart area'} onClick={() => setChartVisible(!chartVisible)} />\n            {\n              chartVisible &&\n              <>\n                <Button circular onClick={() => setChartTimeRange('DAY')}>D</Button>\n                <Button circular onClick={() => setChartTimeRange('WEEK')}>W</Button>\n                <Button circular onClick={() => setChartTimeRange('MONTH')}>M</Button>\n                <Button circular onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n              </>\n            }\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={1} style={{ padding: `${chartVisible ? '5px' : '0px'}` }}>\n\n          <Grid.Column style={{ padding: 0 }}>\n            <Segment\n              style={{\n                display: `${chartVisible ? 'block' : 'none'}`,\n                padding: 5,\n              }}\n            >\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange} />\n            </Segment>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n            <SensorValue\n              value={moment(sensor.time).fromNow()}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={moment() - moment(sensor.time) > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              value={sensor.battery_low + ' %'}\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low < 30 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  )\n}\n\n// Proptypes\nPlantSensor.propTypes = {\n  sensor: PropTypes.object.isRequired\n}\n\nexport default PlantSensor","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment, Grid, Header, Icon, Button } from 'semantic-ui-react'\nimport moment from 'moment'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n\nconst HouseSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n\n  return (\n    <Segment inverted secondary style={{ margin: '2px 1px', background: 'beige', color: 'black' }}>\n\n\n      <Header style={{ color: 'black' }} textAlign='center' as='h3'>\n        <Icon name='home' color='black' size='large' />\n        {sensor.location}\n      </Header>\n\n      <Grid textAlign='center' columns={2} >\n        <Grid.Row>\n\n          <Grid.Column color={sensor.soil_moisture < 30 ? 'yellow' : null}>\n            <SensorValue\n              size={'big'}\n              value={sensor.humidity + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button circular icon={chartVisible ? 'close' : 'chart area'} onClick={() => setChartVisible(!chartVisible)} />\n            {\n              chartVisible &&\n              <>\n                <Button circular onClick={() => setChartTimeRange('DAY')}>D</Button>\n                <Button circular onClick={() => setChartTimeRange('WEEK')}>W</Button>\n                <Button circular onClick={() => setChartTimeRange('MONTH')}>M</Button>\n                <Button circular onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n              </>\n            }\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={1} style={{ padding: `${chartVisible ? '5px' : '0px'}` }}>\n\n          <Grid.Column style={{ padding: 0 }}>\n            <Segment\n              style={{\n                display: `${chartVisible ? 'block' : 'none'}`,\n                padding: 5,\n              }}\n            >\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange} />\n            </Segment>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n\n            <SensorValue\n              value={moment(sensor.time).fromNow()}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={moment() - moment(sensor.time) > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low === 1 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n\n    </Segment>\n  )\n}\n\n// Proptypes\nHouseSensor.propTypes = {\n  sensor: PropTypes.object.isRequired\n}\n\nexport default HouseSensor","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment } from 'semantic-ui-react'\n// Components\nimport Loading from './Loading'\nimport PlantSensor from './PlantSensor'\nimport HouseSensor from './HouseSensor'\n\n\nconst SensorView = ({ show, sensorData, sensorError, token }) => {\n\n  if (!show) {\n    return null\n  }\n\n  const notifyStatus = () => {\n\n    if (sensorError === 'Sensors loading') {\n      return <div></div>\n    }\n    console.log(sensorError)\n    \n    if (!token.sensorEndpoint || sensorError === 'GraphQL error: Request failed with status code 404') {\n      return (\n        <Segment\n          secondary\n          inverted\n          color='red'\n          textAlign='center'>\n          {!token.sensorEndpoint\n            ? 'Not connected to any sensor endpoint'\n            : 'Rasp offline or starting from reboot'\n          }\n        </Segment>\n      )\n    }\n    return null\n  }\n\n  const sensors = () =>\n    sensorData\n      ? sensorData.map(sensor =>\n        sensor.type === 'plant'\n          ? <PlantSensor key={sensor.id} sensor={sensor} />\n          : <HouseSensor key={sensor.id} sensor={sensor} />)\n      : null\n\n  return (\n    <div style={{ height: '100%', overflowY: 'scroll' }}>\n      {sensorError || !token.sensorEndpoint\n        ? notifyStatus()\n        : sensors()\n      }\n    </div>\n  )\n}\n\n// Proptypes\nSensorView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  sensorData: PropTypes.array,\n  sensorError: PropTypes.string,\n  token: PropTypes.object\n}\n\nexport default SensorView","import { gql } from 'apollo-boost'\n\nconst chatMessages = gql`\n{\n  messages {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default chatMessages","import { gql } from 'apollo-boost'\n\nconst createMessage = gql`\nmutation createMessage(\n  $content: String!\n  ) {\n  createMessage(\n    content: $content\n  ) {\n    content\n    user {\n      name\n    }\n    created\n    id\n  }\n}\n`\n\nexport default createMessage","import { gql } from 'apollo-boost'\n\nconst messageAdded = gql`\nsubscription {\n  messageAdded {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default messageAdded","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment, Comment, Divider } from 'semantic-ui-react'\n\nconst ChatMessage = ({ message, currentUser }) => {\n\n  if (!currentUser.me) {\n    return null\n  }\n  // Defines message color by user\n  const defSegColor = currentUser.me.name === message.user.name\n    ? 'blue'\n    : 'green'\n\n  // Defines float side by user\n  const defFloatSide = currentUser.me.name === message.user.name\n    ? 'left'\n    : 'right'\n\n  const segmentStyle = {\n    margin: '0 0 5px 0',\n    padding: 7,\n    float: `${defFloatSide}`,\n    clear: 'both'\n  }\n\n  return (\n    <Comment\n      data-cy='message'\n      style={{ marginTop: 7, paddingTop: 7, overflow: 'auto' }}>\n      <Segment\n        style={segmentStyle} compact inverted color={defSegColor} secondary>\n        <Comment.Content>\n          <Comment.Author as='a'>\n            {message.user.name}\n          </Comment.Author>\n          <Comment.Metadata>\n            <div>{new Date(parseInt(message.created)).toLocaleString()}</div>\n          </Comment.Metadata>\n          <Divider style={{ margin: '4px 0px 4px 0px' }} />\n          {message.content}\n        </Comment.Content>\n      </Segment>\n    </Comment>\n  )\n}\n\n// Proptypes\nChatMessage.propTypes = {\n  message: PropTypes.object.isRequired,\n  currentUser: PropTypes.object.isRequired\n}\n\nexport default ChatMessage","// Libraries\nimport React, { useState, useRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useQuery, useMutation, useSubscription } from 'react-apollo-hooks'\nimport { Container, Icon, Comment, Menu, Input } from 'semantic-ui-react'\n// TypeDefs\nimport chatMessages from '../graphql/queries/chatMessages'\nimport currentUser from '../graphql/queries/currentUser'\nimport createMessage from '../graphql/mutations/createMessage'\nimport messageAdded from '../graphql/subscriptions/messageAdded'\n// Components\nimport ChatMessage from './ChatMessage'\nimport Loading from './Loading'\n// Helper functions\nimport { includedIn } from '../utilities/helperFuncs'\n\nconst ChatView = ({ show }) => {\n  const { data, loading } = useQuery(chatMessages)\n  const userQuery = useQuery(currentUser)\n  const [messageInput, setMessageInput] = useState('')\n  const addMessage = useMutation(createMessage)\n  const el = useRef(null)\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [show])\n\n\n  // eslint-disable-next-line no-unused-vars\n  const addedMessage = useSubscription(messageAdded, {\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      const messageData = client.readQuery({ query: chatMessages })\n      const addedMessage = subscriptionData.data.messageAdded\n\n      if (!includedIn(messageData.messages, addedMessage.id)) {\n        messageData.messages.push(addedMessage)\n\n        client.writeQuery({\n          query: chatMessages,\n          data: messageData,\n          id: 1\n        })\n        el.current.scrollIntoView({ block: 'end', behavior: 'smooth' })\n      }\n    }\n  })\n\n  const scrollToBottom = () => {\n    if (!el.current) { return }\n    el.current.scrollIntoView({ block: 'end' })\n  }\n\n  const handleSubmit = () => {\n    // Prevents empty messages\n    if (messageInput.length < 1) {\n      return\n    }\n\n    addMessage({\n      variables: {\n        \"content\": messageInput\n      }\n    })\n    setMessageInput('')\n  }\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <div style={{ height: '100%' }}>\n      <Container style={{ height: '90%', overflowY: 'scroll' }}>\n        {\n          loading || userQuery.loading\n            ?\n            <Loading inverted={true}/>\n            :\n            <Comment.Group>\n              {data.messages.map(message => (\n                <ChatMessage\n                  key={message.id}\n                  message={message}\n                  currentUser={userQuery.data}\n                />\n              ))}\n            </Comment.Group>\n        }\n        <div id={'el'} ref={el}></div>\n      </Container>\n\n      <Menu fluid color='grey' style={{ marginBottom: 0, marginTop: 0, height: '10%' }}>\n        <Menu.Item style={{ width: '80vw' }}>\n          <Input\n          data-cy='chat-input'\n            fluid\n            value={messageInput}\n            onChange={({ target }) => setMessageInput(target.value)}\n            onKeyPress={({ key }) => {\n              if (key === 'Enter') {\n                handleSubmit()\n              }\n            }}\n            onFocus={scrollToBottom}\n          />\n        </Menu.Item>\n        <Menu.Item\n          style={{ width: '20vw', justifyContent: 'center' }}\n          onClick={handleSubmit}>\n          <Icon\n            name='send'\n            inverted\n            circular\n            color='green' />\n        </Menu.Item>\n      </Menu>\n    </div>\n  )\n}\n\n// Proptypes\nChatView.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nexport default ChatView\n","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table, Container, Header } from 'semantic-ui-react'\n\nconst AboutView = ({ show }) => {\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Container textAlign='center'>\n      <Header as='h1' style={{ padding: 25 }}>\n        About Kaste 2.0\n      </Header>\n      <Table style={{ background: 'lightgreen' }}>\n        <tbody>\n          <tr>\n            <td>Aim:</td>\n            <td>Design and implement a responsive web app to monitor and water plants.</td>\n          </tr>\n          <tr>\n            <td>Features:</td>\n            <td>\n              <ul>\n                <li>Plantwatering functionality for two or more users</li>\n                <li>Possibility to read plant info through charts</li>\n                <li>Simple chat</li>\n                <li>Rebooting Raspberry (that control sensor data)</li>\n              </ul>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    </Container>\n  )\n}\n\n// Proptypes\nAboutView.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nexport default AboutView","import { gql } from 'apollo-boost'\n\nconst editUserSensorEndpoint = gql`\nmutation editUserSensorEndpoint(\n  $sensorEndpoint: String!\n  ) {\n    editUserSensorEndpoint(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    sensorEndpoint\n    name\n    username\n  }\n}\n`\n\nexport default editUserSensorEndpoint","import { gql } from 'apollo-boost'\n\nconst reboot = gql`\nmutation reboot(\n  $sensorEndpoint: String!\n  ) {\n    reboot(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    message\n  }\n}\n`\n\nexport default reboot","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Input, Segment, Header, Divider, Message, Grid } from 'semantic-ui-react'\nimport axios from 'axios'\nimport { useMutation } from 'react-apollo-hooks'\n// Custom hooks\nimport useNotification from '../hooks/useNotification'\nimport useAction from '../hooks/useAction'\n// TypeDefs\nimport editUserSensorEndpoint from '../graphql/mutations/editUserSensorEndpoint'\nimport reboot from '../graphql/mutations/reboot'\n// Helper functions\nimport { handleSensorEndpointUpdateForToken } from '../utilities/helperFuncs'\n\nconst SensorUrlForm = ({ sensorsConnected, token, setToken, actions, sensorService }) => {\n  const [sensorUrlField, setSensorUrlField] = useState('')\n  const [notification, setNotification] = useNotification()\n  const editSensorEndpoint = useMutation(editUserSensorEndpoint)\n  const fireAction = useAction()\n\n  const handleConnect = async () => {\n    try {\n      const response = await axios.get(sensorUrlField)\n      const isValidUrl = Object.keys(response.data).includes('sensors')\n\n      if (isValidUrl) {\n        const confirmation = window.confirm('Would you like to receive information about these sensors?')\n\n        if (confirmation) {\n          editSensorEndpoint({\n            variables: {\n              sensorEndpoint: sensorUrlField\n            }\n          })\n\n          // For localstorage\n          handleSensorEndpointUpdateForToken(sensorUrlField, setToken)\n          // For app\n          setSensorUrlField('')\n        }\n      }\n    } catch (error) {\n      setNotification(error.message)\n    }\n  }\n\n  const handleClearUrl = () => {\n    const confirmation = window.confirm('Are you sure? Clearing sensor resource url cuts access to all information and functionality.')\n\n    if (confirmation) {\n      editSensorEndpoint({\n        variables: {\n          sensorEndpoint: ''\n        }\n      })\n\n      handleSensorEndpointUpdateForToken('', setToken)\n    }\n  }\n\n  const handleReboot = async () => {\n    const confirmation = window.confirm('WARNING: Endpoint computer might not recover correctly from reboot!')\n\n    if (confirmation) {\n      fireAction(actions.reboot ,reboot)\n\n      sensorService.stopFetching()\n      sensorService.startFetching(token.sensorEndpoint)\n    }\n\n  }\n\n  return (\n    <Segment>\n      <Header>\n        Sensor resource URL\n      </Header>\n      <small style={{ color: 'gray' }}>\n        Provide an endpoint URL where sensor output comes from\n      </small>\n      <Input\n        data-cy='sensor-url-input'\n        value={sensorUrlField}\n        onChange={({ target }) => setSensorUrlField(target.value)}\n        fluid\n        placeholder='Enter URL...'\n        action={\n          <Button\n            data-cy='sensor-url-button'\n            loading={false}\n            onClick={handleConnect}>Connect\n          </Button>\n        }\n      />\n      {\n        token.sensorEndpoint\n          ?\n          <>\n            <Segment color={'green'}>\n              <Header as='h3'>\n                connected at:\n              </Header>\n              {token.sensorEndpoint}\n              <Button\n                fluid\n                style={{ marginTop: 10 }}\n                onClick={handleClearUrl}>\n                clear\n              </Button>\n            </Segment>\n            <Segment\n              inverted\n              secondary\n              color={sensorsConnected ? 'green' : 'red'}>\n              <Grid divided columns={2} textAlign='center'>\n                <Grid.Row verticalAlign='middle'>\n                  <Grid.Column>\n                    Endpoint status: {sensorsConnected ? 'Online' : 'Offline'}\n                  </Grid.Column>\n                  <Grid.Column>\n                    <Button\n                      disabled={!sensorsConnected}\n                      onClick={handleReboot}\n                      icon='redo'\n                      content='Reboot' />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Segment>\n          </>\n          :\n          <Segment color={'red'}>\n            Not connected\n          </Segment>\n      }\n      <Divider />\n      {notification &&\n        <Message color='red'>\n          {notification}\n        </Message>\n      }\n    </Segment>\n  )\n}\n\n// Proptypes\nSensorUrlForm.propTypes = {\n  sensorsConnected: PropTypes.bool.isRequired,\n  token: PropTypes.object.isRequired,\n  setToken: PropTypes.func.isRequired\n}\n\nexport default SensorUrlForm","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid } from 'semantic-ui-react'\n// Components\nimport SensorUrlForm from './SensorUrlForm'\n\nconst SettingsView = ({ show, sensorsConnected, token, setToken, actions, sensorService }) => {\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Grid divided='vertically'>\n      <Grid.Row>\n        <Grid.Column>\n          <SensorUrlForm\n            sensorsConnected={sensorsConnected}\n            token={token}\n            actions={actions}\n            sensorService={sensorService}\n            setToken={setToken} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\n// Proptypes\nSettingsView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  sensorsConnected: PropTypes.bool,\n  token: PropTypes.object,\n  setToken: PropTypes.func.isRequired\n}\n\nexport default SettingsView","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Segment, Button } from 'semantic-ui-react'\n\nconst ImageError = ({ setReloadImage }) => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Icon name='frown' inverted color='grey' size='massive' />\n\n      <Segment\n        color='red'\n        inverted\n        secondary\n        compact>\n        <p style={{ color: 'white' }}>Image failed to load...</p>\n      </Segment>\n\n      <Button\n      data-cy='error-button'\n        circular\n        icon='redo'\n        onClick={async () => {\n          await setReloadImage(true)\n          setReloadImage(false)\n        }}>\n\n\n      </Button>\n    </div>\n  )\n}\n\n// Proptypes\nImageError.propTypes = {\n  setReloadImage: PropTypes.func.isRequired\n}\n\nexport default ImageError","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Image } from 'semantic-ui-react'\n// Components\nimport Loading from './Loading'\nimport ImageError from './ImageError'\n\nconst divStyle = {\n  height: '100%',\n  background: 'black',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}\n\nconst VideoView = ({ show, actions }) => {\n  const [imageStatus, setImageStatus] = useState(<Loading inverted={false}/>)\n  const [displayImage, setDisplayImage] = useState('block')\n  const [reloadImage, setReloadImage] = useState(false)\n\n  useEffect(() => {\n    setImageStatus(<Loading inverted={false}/>)\n    setDisplayImage('block')\n  }, [show, reloadImage])\n\n  if (!show || reloadImage) {\n    return null\n  }\n  return (\n    <div style={divStyle}>\n\n      {imageStatus}\n      {\n        actions\n          ? <Image\n            style={{ maxWidth: 800, display: `${displayImage}` }}\n            centered\n            src={actions.camera}\n            fluid\n            onLoad={() => setImageStatus(null)}\n            onError={() => {\n              setImageStatus(<ImageError setReloadImage={setReloadImage} />)\n              setDisplayImage('none')\n            }}\n          />\n          : null\n      }\n    </div>\n  )\n}\n\n// Proptypes\nVideoView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  actions: PropTypes.object\n}\n\nexport default VideoView","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\n// Custom hooks\nimport useSensors from './hooks/useSensors'\n// Components\nimport ResponsiveLayout from './components/ResponsiveLayout'\nimport LoginView from './components/LoginView'\nimport SensorView from './components/SensorView'\nimport ChatView from './components/ChatView'\nimport AboutView from './components/AboutView'\nimport SettingsView from './components/SettingsView'\nimport VideoView from './components/VideoView'\n\nconst App = () => {\n  const [page, setPage] = useState('Settings')\n  const [token, setToken] = useState(JSON.parse(localStorage.getItem('kaste-user-token')))\n  const [sensorData, actions, sensorService, sensorsConnected, sensorError] = useSensors(30) // update interval (in seconds)\n  const client = useApolloClient()\n\n  useEffect(() => {\n    if (token && token.sensorEndpoint) {\n      sensorService.startFetching(token.sensorEndpoint)\n    } else {\n      sensorService.stopFetching()\n    }\n  }, [token])\n\n  const logOut = () => {\n    setPage('Settings')\n    sensorService.stopFetching()\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  return (\n    <>\n      {!token\n        ?\n        <LoginView\n          setToken={setToken} />\n        :\n        <ResponsiveLayout\n          page={page}\n          setPage={setPage}\n          logOut={logOut}\n          actions={actions}\n          token={token}\n          sensorService={sensorService}\n        >\n\n          <SensorView\n            token={token}\n            sensorData={sensorData}\n            sensorError={sensorError}\n            show={page === 'Sensors'}\n          />\n\n          <ChatView\n            show={page === 'Chat'}\n          />\n\n          <AboutView\n            show={page === 'About'}\n          />\n\n          <SettingsView\n            show={page === 'Settings'}\n            sensorsConnected={sensorsConnected}\n            token={token}\n            setToken={setToken}\n            actions={actions}\n            sensorService={sensorService}\n          />\n\n          <VideoView\n            show={page === 'Video'}\n            token={token}\n            actions={actions}\n          />\n        </ResponsiveLayout>\n      }\n    </>\n  )\n}\n\nexport default App;\n\n","//Libraries\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo-hooks'\n// ...Because of authorization for headers (instead of apollo-boost)\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n// ...For Subscriptions (websocket)\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n// Utilities\nimport config from './utilities/config'\n// Components\nimport App from './App'\n\nconst wslink = new WebSocketLink({\n  uri: config.wsUrl,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: config.httpUrl\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = JSON.parse(localStorage.getItem('kaste-user-token'))\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token.value}` : null\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wslink,\n  authLink.concat(httpLink),\n)\n\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'))"],"sourceRoot":""}