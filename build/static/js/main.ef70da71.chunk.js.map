{"version":3,"sources":["utilities/config.js","utilities/helperFuncs.js","graphql/queries/sensorData.js","hooks/index.js","components/WateringModal.js","components/MobileContainer.js","components/DesktopContainer.js","components/ResponsiveLayout.js","graphql/mutations/loginUser.js","graphql/queries/currentUser.js","components/LoginView.js","components/Loading.js","components/SensorValue.js","graphql/queries/chartData.js","components/Chart.js","components/PlantSensor.js","components/HouseSensor.js","components/SensorView.js","graphql/queries/chatMessages.js","graphql/mutations/createMessage.js","graphql/subscriptions/messageAdded.js","components/ChatMessage.js","components/ChatView.js","components/AboutView.js","graphql/mutations/editUserSensorEndpoint.js","components/SensorUrlForm.js","components/SettingsView.js","components/ImageError.js","components/VideoView.js","App.js","index.js"],"names":["config","wsUrl","httpUrl","includedIn","set","object","map","p","id","includes","formatSensorData","sensorData","filteredArray","Object","values","reduce","acc","cur","concat","filter","sensor","model","length","Error","handleSensorEndpointUpdateForToken","sensorUrlField","setToken","prevToken","JSON","parse","localStorage","getItem","removeItem","updatedToken","objectSpread","sensorEndpoint","window","setItem","stringify","gql","_templateObject","useNotification","duration","arguments","undefined","_useState3","useState","_useState4","slicedToArray","text","setText","setTimeout","WateringModal","_ref","actions","wateringConnected","setPage","_useState","_useState2","showModal","setShowModal","recentlyWatered","setRecentlyWatered","handleWatering","action","console","log","axios","get","error","message","react_default","a","createElement","Modal","centered","basic","open","onClose","trigger","Menu","Item","data-cy","onClick","disabled","Icon","name","style","textAlign","size","Header","content","icon","Actions","marginTop","Button","Group","color","water","oneMin","Or","fiveMin","tenMin","MobileContainer","children","logOut","page","token","sensorService","showSidebar","setShowSidebar","cameraConnected","setCameraConnected","_useState5","_useState6","setRaspConnected","_useState7","_useState8","setWateringConnected","handleViewChange","view","useEffect","camera","reboot","Fragment","Responsive","maxWidth","onlyMobile","as","Sidebar","Pushable","height","animation","inverted","onHide","vertical","visible","width","username","components_WateringModal","waterstop","Pusher","dimmed","widths","pointing","marginBottom","borderRadius","alignSelf","header","position","DesktopContainer","minWidth","onlyTablet","fixed","margin","ResponsiveLayout","components_MobileContainer","components_DesktopContainer","loginUser","loginUser_templateObject","currentUser","currentUser_templateObject","LoginView","login","useMutation","_useNotification","_useNotification2","notification","setNotification","setUsername","password","setPassword","handleLogin","_ref2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","update","client","result","data","variables","refetchQueries","query","t0","graphQLErrors","stop","apply","this","className","Grid","background","verticalAlign","Column","dividing","Form","onSubmit","Segment","stacked","raised","Input","type","value","onChange","_ref3","target","fluid","iconPosition","placeholder","_ref4","Message","negative","Loading","Dimmer","active","Loader","SensorValue","iconColor","fontSize","chartData","chartData_templateObject","options","layout","padding","bottom","scales","xAxes","ticks","autoSkip","maxTicksLimit","yAxes","suggestedMin","max","Chart","chartTimeRange","plantData","useQuery","toUpperCase","range","fetchPolicy","loading","minHeight","components_Loading","keys","secondary","formattedChartData","labels","time","moment","utc","local","format","subtract","fromNow","returnLineColor","measure","datasets","push","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","formatSensorDataIntoChartData","es","legend","display","PlantSensor","chartVisible","setChartVisible","setChartTimeRange","columns","Row","soil_moisture","components_SensorValue","Math","floor","light","temperature_C","nutrient","circular","components_Chart","battery_low","HouseSensor","location","humidity","SensorView","show","sensorError","overflowY","components_PlantSensor","key","components_HouseSensor","chatMessages","chatMessages_templateObject","createMessage","createMessage_templateObject","messageAdded","messageAdded_templateObject","ChatMessage","me","defSegColor","user","defFloatSide","segmentStyle","float","clear","Comment","paddingTop","overflow","compact","Content","Author","Metadata","Date","parseInt","created","toLocaleString","Divider","ChatView","_useQuery","userQuery","messageInput","setMessageInput","addMessage","el","useRef","scrollToBottom","useSubscription","onSubscriptionData","subscriptionData","messageData","readQuery","addedMessage","messages","writeQuery","current","scrollIntoView","block","behavior","handleSubmit","Container","components_ChatMessage","ref","onKeyPress","onFocus","justifyContent","AboutView","Table","editUserSensorEndpoint","editUserSensorEndpoint_templateObject","SensorUrlForm","sensorsConnected","setSensorUrlField","editSensorEndpoint","handleConnect","response","sent","confirm","handleReboot","_callee2","_context2","stopFetching","startFetching","divided","SettingsView","components_SensorUrlForm","ImageError","setReloadImage","divStyle","alignItems","VideoView","imageStatus","setImageStatus","displayImage","setDisplayImage","reloadImage","Image","src","onLoad","onError","components_ImageError","App","_useSensors","setSensorData","setActions","_useState9","_useState10","isConnected","setIsConnected","_useState11","_useState12","setError","_useState13","_useState14","intervalId","setIntervalId","useApolloClient","getSensorData","url","parsedSensorQuery","sensorDatas","sensors","_x","setInterval","clearInterval","useSensors","_useSensors2","components_ResponsiveLayout","resetStore","components_SensorView","components_ChatView","components_AboutView","components_SettingsView","components_VideoView","components_LoginView","wslink","WebSocketLink","uri","reconnect","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ef70da71.chunk.js","sourcesContent":["let wsUrl = 'ws://localhost:4000/graphql'\nlet httpUrl = 'http://localhost:4000/graphql'\n\nif (process.env.NODE_ENV === 'production') {\n  wsUrl = 'wss://lit-forest-54340.herokuapp.com/graphql'\n  httpUrl = 'https://lit-forest-54340.herokuapp.com/graphql'\n}\n\nexport default { wsUrl, httpUrl }","export const includedIn = (set, object) =>\n  set.map(p => p.id).includes(object.id)\n\n// Sensor data comes in two objects. they need to be merged into one one array\nexport const formatSensorData = (sensorData) => {\n  const values = Object.values(sensorData)\n  const flattenedArray = values.reduce((acc, cur) => cur.concat(acc))\n  // Some sensors might show empty values because they're not online yet\n  // so they need to be filtered out.\n  const filteredArray = flattenedArray.filter(sensor => sensor.model !== '')\n\n  if (filteredArray.length === 0) {\n    throw new Error('Sensors loading')\n  }\n\n  return filteredArray\n}\n\n// Sets new url endpoint to localstorage\nexport const handleSensorEndpointUpdateForToken = (sensorUrlField, setToken) => {\n  const prevToken = JSON.parse(localStorage.getItem('kaste-user-token'))\n  localStorage.removeItem('kaste-user-token')\n\n  const updatedToken = {\n    ...prevToken,\n    sensorEndpoint: sensorUrlField\n  }\n\n  window.localStorage.setItem('kaste-user-token', JSON.stringify(updatedToken))\n  setToken(updatedToken)\n}\n\n\nexport default { includedIn, formatSensorData, handleSensorEndpointUpdateForToken }","import { gql } from 'apollo-boost'\n\nconst sensorData = gql`\n  query SensorData($sensorEndpoint: String!) {\n  sensorData (sensorEndpoint: $sensorEndpoint){\n    value\n  }\n}\n`\n\nexport default sensorData","// Libraries\nimport { useState } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\n// Helper functions\nimport { formatSensorData } from '../utilities/helperFuncs'\n// Typedefs\n// NOTE: Really weirdly, importing as sensorData results in Graphql error\nimport sensorDatas from '../graphql/queries/sensorData'\n\nexport const useField = (type) => {\n  const [value, setValue] = useState('')\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  const reset = () => {\n    setValue('')\n  }\n\n  return {\n    type,\n    value,\n    onChange,\n    reset\n  }\n}\n\n// Provide duration as argument (seconds)\nexport const useNotification = (duration = 5) => {\n  const [text, setText] = useState(null)\n\n  const reset = () => setText(null)\n\n  const set = (text) => {\n    setText(text)\n    setTimeout(() => {\n      reset()\n    }, duration * 1000)\n  }\n\n  return [text, set]\n}\n\n// Handle sensor information fetching\n// Provide duration as argument (seconds)\nexport const useSensors = (duration = 60) => {\n  const [sensorData, setSensorData] = useState(null)\n  const [actions, setActions] = useState(null)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useState(null)\n  const [intervalId, setIntervalId] = useState(null)\n  const client = useApolloClient()\n  // const {data, loading} = useQuery(sensorDatas, {\n  //   variables: {\n  //     sensorEndpoint: 'http://86.115.57.126:8001/ws/pasila_sensors'\n  //   }\n  // })\n\n  // if (!loading) {\n  //   console.log(JSON.parse(data.sensorData.value))\n  // }\n\n\n\n\n  const getSensorData = async (url) => {\n    try {\n      // TÄÄ PALVELIMEN KAUTTA\n      const { data } = await client.query({\n        query: sensorDatas,\n        variables: { sensorEndpoint: url },\n        fetchPolicy: 'no-cache'\n      })\n      const parsedSensorQuery = JSON.parse(data.sensorData.value)\n      \n      // Format sensor data with helper function\n      setSensorData(formatSensorData(parsedSensorQuery.sensors))\n      // Get actions\n      setActions(parsedSensorQuery.actions)\n      setIsConnected(true)\n      setError(null)\n\n    } catch (error) {\n      setIsConnected(false)\n      setError(error.message)\n      setTimeout(() => {\n\n        getSensorData(url)\n      }, 2000);\n    }\n  }\n\n  const startFetching = (url) => {\n    console.log('fetching...')\n    getSensorData(url)\n    const id = setInterval(() => {\n      console.log('fetching...')\n      getSensorData(url)\n    }, duration * 1000);\n    setIntervalId(id)\n  }\n\n  const stopFetching = () => {\n    clearInterval(intervalId)\n    setSensorData(null)\n    setIsConnected(false)\n    setActions(null)\n  }\n\n  const sensorService = {\n    startFetching,\n    stopFetching\n  }\n\n\n  return [sensorData, actions, sensorService, isConnected, error]\n}","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal, Button, Icon, Menu, Header } from 'semantic-ui-react'\nimport axios from 'axios'\n\nconst WateringModal = ({ actions, wateringConnected, setPage }) => {\n  const [showModal, setShowModal] = useState(false)\n  const [recentlyWatered, setRecentlyWatered] = useState(false)\n\n  const handleWatering = (duration, action) => {\n    setRecentlyWatered(true)\n    console.log('Watering plants plants: ', duration)\n    try {\n      setShowModal(false)\n      axios.get(action)\n      setPage('Video')\n    } catch (error) {\n      console.error(error.message)\n    }\n\n    setTimeout(() => {\n      setRecentlyWatered(false)\n      console.log('Watering completed')\n\n    }, duration * 1000 * 60)\n  }\n\n  return (\n    <Modal\n      centered\n      basic\n      open={showModal}\n      onClose={() => setShowModal(false)}\n      trigger={\n        <Menu.Item\n          data-cy='water-button'\n          onClick={() => setShowModal(true)}\n          disabled={!wateringConnected || recentlyWatered}>\n          <Icon name='shower' />\n          Water Plants\n        </Menu.Item>\n      }\n      style={{\n        textAlign: 'center'\n      }}>\n      <Icon name='shower' size='massive' />\n      <Header content='Choose watering duration:' icon='clock' />\n      <Modal.Actions style={{ textAlign: 'center', marginTop: 15 }}>\n        <Button.Group>\n          <Button \n          data-cy='modal-button-1min'\n          color='green'\n          onClick={() => handleWatering(1, actions.water.oneMin)}>\n            1 min\n          </Button>\n          <Button.Or />\n          <Button\n          data-cy='modal-button-5min'\n          color='green'\n          onClick={() => handleWatering(5, actions.water.fiveMin)}>\n            5 min\n          </Button>\n          <Button.Or />\n          <Button\n          data-cy='modal-button-10min'\n          color='green'\n          onClick={() => handleWatering(10, actions.water.tenMin)}>\n            10 min\n          </Button>\n        </Button.Group>\n        <Button\n          data-cy='modal-button-cancel'\n          color='red'\n          onClick={() => setShowModal(false)}\n          style={{ marginTop: 20 }}>\n          cancel\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\n// Proptypes\nWateringModal.propTypes = {\n  actions: PropTypes.object,\n  wateringConnected: PropTypes.bool.isRequired,\n  setPage: PropTypes.func.isRequired\n}\n\nexport default WateringModal","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Responsive, Sidebar, Menu, Icon } from 'semantic-ui-react'\nimport axios from 'axios'\n// Components\nimport WateringModal from './WateringModal'\n\nconst MobileContainer = ({ children, setPage, logOut, page, actions, token, sensorService }) => {\n  const [showSidebar, setShowSidebar] = useState(false)\n  const [cameraConnected, setCameraConnected] = useState(false)\n  const [raspConnected, setRaspConnected] = useState(false)\n  const [wateringConnected, setWateringConnected] = useState(false)\n\n  // Handles page navigation\n  const handleViewChange = (view) => () => {\n    setShowSidebar(false)\n    setPage(view)\n  }\n\n  // Stops watering\n  const handleStopWatering = () => {\n    setShowSidebar(false)\n    axios.get(actions.water.waterstop)\n  }\n\n  // Check if sensor actions include camera or watering functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setRaspConnected(actions.reboot !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setRaspConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  return (\n    <>\n      <Responsive\n        maxWidth={Responsive.onlyMobile.maxWidth}\n        as={Sidebar.Pushable}\n        style={{ height: '100vh' }}\n      >\n        <Sidebar\n          as={Menu}\n          animation='push'\n          inverted\n          onHide={() => setShowSidebar(false)}\n          vertical\n          visible={showSidebar}\n          icon='labeled'\n          width='thin'\n        >\n          {token &&\n            <Menu.Header as='small' style={{ color: 'white' }}>\n              <Icon name='user' color='green' />\n              {token.username}\n            </Menu.Header>\n          }\n          <Menu.Item\n            data-cy='sensors-button'\n            onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='chat-button'\n            onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='settings-button'\n            onClick={handleViewChange('Settings')}>\n            <Icon name='settings' />\n            Settings\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='about-button'\n            onClick={handleViewChange('About')}>\n            <Icon name='question' />\n            About\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='livefeed-button'\n            disabled={!cameraConnected}\n            onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n\n          <WateringModal\n            actions={actions}\n            wateringConnected={wateringConnected}\n            setPage={setPage}\n          />\n\n          <Menu.Item\n            data-cy='stop-button'\n            disabled={!wateringConnected}\n            onClick={handleStopWatering}>\n            <Icon name='stop circle' />\n            Stop Watering\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher style={{ height: '100%' }} dimmed={showSidebar}>\n\n          <Menu widths={3} inverted pointing color='green' size='large' style={{ height: '50px', marginBottom: 0, borderRadius: 0 }}>\n            <Menu.Item onClick={() => setShowSidebar(true)} style={{ alignSelf: 'center' }}>\n              <Icon data-cy='sidebar-button' name='sidebar' />\n            </Menu.Item>\n            <Menu.Item header={true}>\n              {page}\n            </Menu.Item>\n            <Menu.Item position='right' onClick={() => logOut()} style={{ alignSelf: 'center' }}>\n              <Icon name='log out' />\n            </Menu.Item>\n          </Menu>\n\n          <div style={{ height: 'calc(100vh - 50px)' }}>\n            {children}\n          </div>\n\n        </Sidebar.Pusher>\n      </Responsive>\n    </>\n  )\n}\n\n// Proptypes\nMobileContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default MobileContainer","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Responsive, Menu, Icon } from 'semantic-ui-react'\nimport axios from 'axios'\n// Components\nimport WateringModal from './WateringModal'\n\nconst DesktopContainer = ({ children, setPage, logOut, actions, token, sensorService }) => {\n  const [cameraConnected, setCameraConnected] = useState(false)\n  const [wateringConnected, setWateringConnected] = useState(false)\n\n  // Handles page navigation\n  const handleViewChange = (view) => () => {\n    setPage(view)\n  }\n\n  // Stops watering\n  const handleStopWatering = () => {\n    axios.get(actions.water.waterstop)\n  }\n\n  // Check if sensor actions include camera or watering functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  return (\n    <>\n      <Responsive\n        style={{ height: '100vh' }}\n        minWidth={Responsive.onlyTablet.minWidth}\n      >\n        <Menu\n          style={{ height: 71 }}\n          inverted\n          icon='labeled'\n          color='green'\n          fixed='top'\n        >\n\n          <Menu.Item\n            data-cy='sensors-button'\n            onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='chat-button'\n            onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n\n          <WateringModal\n            actions={actions}\n            wateringConnected={wateringConnected}\n            setPage={setPage}\n          />\n\n          <Menu.Item\n            data-cy='stop-button'\n            disabled={!wateringConnected}\n            onClick={handleStopWatering}>\n            <Icon name='stop circle' />\n            Stop Watering\n          </Menu.Item>\n\n          <Menu.Item\n            data-cy='livefeed-button'\n            disabled={!cameraConnected}\n            onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n\n          <Menu.Menu position='right'>\n            {token &&\n              <Menu.Header as='p' style={{ color: 'white', alignSelf: 'center', margin: '0 10px 0' }}>\n                <Icon name='user' />\n                {token.username} <br />\n                logged in\n              </Menu.Header>\n            }\n\n            <Menu.Item\n              data-cy='settings-button'\n              onClick={handleViewChange('Settings')}>\n              <Icon name='settings' />\n              Settings\n            </Menu.Item>\n\n            <Menu.Item\n              data-cy='about-button'\n              onClick={handleViewChange('About')}>\n              <Icon name='question' />\n              About\n            </Menu.Item>\n\n            <Menu.Item\n              data-cy='logout-button'\n              onClick={() => logOut(false)}>\n              <Icon name='log out' />\n              Log out\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n\n        <div style={{ height: 71 }} />\n        <div style={{ height: 'calc(100vh - 71px)' }}>\n          {children}\n        </div>\n\n      </Responsive>\n    </>\n  )\n}\n\n// Proptypes\nDesktopContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default DesktopContainer","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\n// Components\nimport MobileContainer from './MobileContainer'\nimport DesktopContainer from './DesktopContainer'\n\nconst ResponsiveLayout = ({ children, setPage, logOut, page, actions, token, sensorService }) => {\n\n  return (\n    <>\n      <MobileContainer // Mobile view\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}\n        sensorService={sensorService}>\n\n        {children}\n\n      </MobileContainer>\n\n      <DesktopContainer // Tablet - desktop view\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}\n        sensorService={sensorService}>\n\n        {children}\n\n      </DesktopContainer>\n    </>\n  )\n}\n\n// Proptypes\nResponsiveLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  setPage: PropTypes.func.isRequired,\n  logOut: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  token: PropTypes.object.isRequired,\n  sensorService: PropTypes.object.isRequired,\n  actions: PropTypes.object\n}\n\nexport default ResponsiveLayout","import { gql } from 'apollo-boost'\n\nconst loginUser = gql`\nmutation loginUser(\n  $password: String!\n  $username: String!\n  ) {\n  login(\n    password: $password\n    username: $username\n  ) {\n    value\n    username\n    sensorEndpoint\n  }\n}\n`\n\nexport default loginUser","import { gql } from 'apollo-boost'\n\nconst currentUser = gql`\n{\n  me {\n    name\n    username\n    id\n    sensorEndpoint\n  }\n}\n`\n\nexport default currentUser","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Message, Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\nimport { useMutation } from 'react-apollo-hooks'\n// Typedefs\nimport loginUser from '../graphql/mutations/loginUser'\nimport currentUser from '../graphql/queries/currentUser'\n// Hooks\nimport { useNotification } from '../hooks/index'\n\n\nconst LoginView = ({ setToken }) => {\n  const login = useMutation(loginUser)\n  const [notification, setNotification] = useNotification()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleLogin = async () => {\n    try {\n      await login({\n        update: (client, result) => {\n          const token = result.data.login\n          setToken(token)\n          localStorage.setItem('kaste-user-token', JSON.stringify(token))\n        },\n        variables: {\n          username, password\n        },\n        refetchQueries: [{ query: currentUser }]\n      })\n    } catch (error) {\n      setNotification(error.graphQLErrors[0].message)\n    }\n  }\n\n  return (\n    <div className='login-form'>\n\n      <style> {`\n  body > div,\n  body > div > div,\n  body > div > div > div.login-form {\n    height: 100%;\n  }\n          `}\n      </style>\n\n      <Grid textAlign='center' style={{ height: '100%', background: 'lightgreen' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 250 }}>\n          <Header as='h1' color='grey' dividing textAlign='center'>\n            Log in to Kaste 2.0\n          </Header>\n          <Form size='large' onSubmit={handleLogin}>\n            <Segment stacked raised>\n              <Form.Input\n                data-cy='username'\n                type=\"text\"\n                value={username}\n                onChange={({ target }) => setUsername(target.value)}\n                fluid\n                icon='user'\n                iconPosition='left'\n                placeholder='Username'\n              />\n              <Form.Input\n                data-cy='password'\n                type=\"password\"\n                value={password}\n                onChange={({ target }) => setPassword(target.value)}\n                fluid\n                icon='lock'\n                iconPosition='left'\n                placeholder='Password'\n              />\n\n              <Button color='brown' size='large' type='submit'>\n                Log in\n              </Button>\n            </Segment>\n            {notification &&\n              <Message negative>\n                {notification}\n              </Message>\n            }\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\n// Proptypes\nLoginView.propTypes = {\n  setToken: PropTypes.func.isRequired\n}\n\nexport default LoginView","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nconst Loading = ({ inverted }) => (\n  <Dimmer inverted={inverted} active>\n    <Loader size='massive'>Loading</Loader>\n  </Dimmer>\n)\n\n// Proptypes\nLoading.propTypes = {\n  inverted: PropTypes.bool.isRequired\n}\n\nexport default Loading","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon } from 'semantic-ui-react'\n\nconst SensorValue = ({ value, icon, iconColor, size }) => {\n  return (\n    <div>\n      <Icon name={icon} size={size} color={iconColor ? iconColor : null} />\n      <span style={{\n        fontSize: `${size === 'big' ? '28px' : '11px'}`,\n        verticalAlign: 'middle'\n      }}>\n        {value}\n      </span>\n    </div>\n  )\n}\n\n// Proptypes\nSensorValue.propTypes = {\n  value: PropTypes.any,\n  icon: PropTypes.string.isRequired,\n  iconColor: PropTypes.string,\n  size: PropTypes.string.isRequired,\n}\n\nexport default SensorValue","import { gql } from 'apollo-boost'\n\nconst chartData = gql`\n  query ChartData($id: Int!, $type: HousePlant!, $range: DayWeekMonthYear!) {\n  chartData(id: $id, type: $type, range: $range) {\n    time\n    light\n    nutrient\n    soilMoisture\n    temperatureC\n    humidity\n  }\n}\n`\n\nexport default chartData","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Line } from 'react-chartjs-2'\nimport moment from 'moment'\nimport { Segment } from 'semantic-ui-react'\n// Type defs\nimport chartData from '../graphql/queries/chartData'\n// Components\nimport Loading from './Loading'\n\nconst formatSensorDataIntoChartData = ({ chartData }) => {\n\n  const formattedChartData = Object.keys(chartData)\n    .reduce((acc, cur) => {\n      if (cur === '__typename' || chartData[cur] === null) {\n        return acc\n      }\n\n      if (cur === 'time') {\n        acc.labels = chartData[cur].map(time => {\n\n          // If sensor data older than 1 day, format differently\n          if (moment() - time > 1000 * 60 * 60 * 24) {\n            return moment.utc(time).local().format('ddd hA')\n          }\n\n          // .fromNow doesn't seem to take UTC into account,\n          // this hacks it to show relative to finnish time\n          return moment(time).subtract(3, 'hours').fromNow(true)\n        })\n\n        return acc\n      }\n\n      const returnLineColor = (measure) => {\n        switch (measure) {\n          case 'temperatureC':\n            return 'rgba(250, 64, 61, 0.7)'\n          case 'nutrient':\n            return 'rgba(250, 158, 61, 0.7)'\n          case 'light':\n            return 'rgba(246, 250, 61, 0.7)'\n          case 'humidity':\n            return 'rgba(61, 152, 250, 0.7)'\n          case 'soilMoisture':\n            return 'rgba(61, 152, 250, 0.7)'\n          default: break\n        }\n      }\n\n      acc.datasets.push(\n        {\n          label: cur,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: returnLineColor(cur),\n          borderColor: returnLineColor(cur),\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: returnLineColor(cur),\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: returnLineColor(cur),\n          pointHoverBorderColor: returnLineColor(cur),\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: chartData[cur]\n        }\n\n      )\n\n      return acc\n    }, { labels: [], datasets: [] })\n\n  return formattedChartData\n}\n\nconst options = {\n  layout: {\n    padding: {\n      bottom: -20\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 5\n        }\n      }\n    ],\n    yAxes: [\n      {\n        ticks: {\n          suggestedMin: 0,\n          max: 100\n        }\n      }\n    ]\n  }\n}\n\nconst Chart = ({ sensor, chartTimeRange }) => {\n  const plantData = useQuery(chartData, {\n    variables: { id: sensor.id, type: sensor.type.toUpperCase(), range: chartTimeRange },\n    fetchPolicy: 'no-cache'\n  })\n\n  if (plantData.loading) {\n    return (\n      <div style={{ minHeight: 'calc(89vw / 2)' }}>\n        <Loading inverted={true} />\n      </div>\n    )\n  }\n\n  if (Object.keys(plantData.data).length === 0) {\n    return <Segment\n      color='red'\n      inverted\n      secondary>\n      Chart failed to load\n    </Segment>\n  }\n  const formattedChartData = formatSensorDataIntoChartData(plantData.data)\n\n  return (\n    <Line\n      data={formattedChartData}\n      options={options}\n      legend={{ display: false }} />\n  )\n}\n\n// Proptypes\nChart.propTypes = {\n  sensor: PropTypes.object.isRequired,\n  chartTimeRange: PropTypes.string.isRequired\n}\n\nexport default Chart","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid, Button, Header, Segment, Icon } from 'semantic-ui-react'\nimport moment from 'moment'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n\nconst PlantSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n\n  return (\n    <Segment\n      color='green'\n      inverted\n      secondary\n      style={{ margin: '2px 1px' }}>\n\n\n      <Header textAlign='center' as='h3'>\n        <Icon name='leaf' size='large' />\n        Capsicum baccatum\n      </Header>\n\n      <Grid textAlign='center' columns={2} >\n        <Grid.Row>\n\n          <Grid.Column color={sensor.soil_moisture < 10 ? 'yellow' : null}>\n            <SensorValue\n              size={'big'}\n              value={sensor.soil_moisture + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={Math.floor(sensor.light) + ' %'}\n              label={'Light'}\n              icon={'sun'}\n              iconColor={'yellow'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={Math.floor(sensor.nutrient) + ' %'}\n              label={'Nutrient'}\n              icon={'pills'}\n              iconColor={'orange'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button data-cy='chart-toggle-button' circular icon={chartVisible ? 'close' : 'chart area'} onClick={() => setChartVisible(!chartVisible)} />\n            {\n              chartVisible &&\n              <>\n                <Button circular onClick={() => setChartTimeRange('DAY')}>D</Button>\n                <Button circular onClick={() => setChartTimeRange('WEEK')}>W</Button>\n                <Button circular onClick={() => setChartTimeRange('MONTH')}>M</Button>\n                <Button circular onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n              </>\n            }\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={1} style={{ padding: `${chartVisible ? '5px' : '0px'}` }}>\n\n          <Grid.Column style={{ padding: 0 }}>\n            <Segment\n              style={{\n                display: `${chartVisible ? 'block' : 'none'}`,\n                padding: 5,\n              }}\n            >\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange} />\n            </Segment>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n            <SensorValue\n              value={moment(sensor.time).fromNow()}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={moment() - moment(sensor.time) > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              value={sensor.battery_low + ' %'}\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low < 30 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  )\n}\n\n// Proptypes\nPlantSensor.propTypes = {\n  sensor: PropTypes.object.isRequired\n}\n\nexport default PlantSensor","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment, Grid, Header, Icon, Button } from 'semantic-ui-react'\nimport moment from 'moment'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n\nconst HouseSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n\n  return (\n    <Segment inverted secondary style={{ margin: '2px 1px', background: 'beige', color: 'black' }}>\n\n\n      <Header style={{ color: 'black' }} textAlign='center' as='h3'>\n        <Icon name='home' color='black' size='large' />\n        {sensor.location}\n      </Header>\n\n      <Grid textAlign='center' columns={2} >\n        <Grid.Row>\n\n          <Grid.Column color={sensor.soil_moisture < 30 ? 'yellow' : null}>\n            <SensorValue\n              size={'big'}\n              value={sensor.humidity + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button circular icon={chartVisible ? 'close' : 'chart area'} onClick={() => setChartVisible(!chartVisible)} />\n            {\n              chartVisible &&\n              <>\n                <Button circular onClick={() => setChartTimeRange('DAY')}>D</Button>\n                <Button circular onClick={() => setChartTimeRange('WEEK')}>W</Button>\n                <Button circular onClick={() => setChartTimeRange('MONTH')}>M</Button>\n                <Button circular onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n              </>\n            }\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={1} style={{ padding: `${chartVisible ? '5px' : '0px'}` }}>\n\n          <Grid.Column style={{ padding: 0 }}>\n            <Segment\n              style={{\n                display: `${chartVisible ? 'block' : 'none'}`,\n                padding: 5,\n              }}\n            >\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange} />\n            </Segment>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n\n            <SensorValue\n              value={moment(sensor.time).fromNow()}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={moment() - moment(sensor.time) > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low === 1 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n\n    </Segment>\n  )\n}\n\n// Proptypes\nHouseSensor.propTypes = {\n  sensor: PropTypes.object.isRequired\n}\n\nexport default HouseSensor","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment } from 'semantic-ui-react'\n// Components\nimport Loading from './Loading'\nimport PlantSensor from './PlantSensor'\nimport HouseSensor from './HouseSensor'\n\n\nconst SensorView = ({ show, sensorData, sensorError, token }) => {\n\n  if (!show) {\n    return null\n  }\n\n  const notifyStatus = () => {\n\n    if (sensorError === 'Sensors loading') {\n      return <div></div>\n    }\n    console.log(sensorError)\n    \n    if (!token.sensorEndpoint || sensorError === 'GraphQL error: Request failed with status code 404') {\n      return (\n        <Segment\n          secondary\n          inverted\n          color='red'\n          textAlign='center'>\n          {!token.sensorEndpoint\n            ? 'Not connected to any sensor endpoint'\n            : 'Rasp offline or starting from reboot'\n          }\n        </Segment>\n      )\n    }\n    return null\n  }\n\n  const sensors = () =>\n    sensorData\n      ? sensorData.map(sensor =>\n        sensor.type === 'plant'\n          ? <PlantSensor key={sensor.id} sensor={sensor} />\n          : <HouseSensor key={sensor.id} sensor={sensor} />)\n      : null\n\n  return (\n    <div style={{ height: '100%', overflowY: 'scroll' }}>\n      {sensorError || !token.sensorEndpoint\n        ? notifyStatus()\n        : sensors()\n      }\n    </div>\n  )\n}\n\n// Proptypes\nSensorView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  sensorData: PropTypes.array,\n  sensorError: PropTypes.string,\n  token: PropTypes.object\n}\n\nexport default SensorView","import { gql } from 'apollo-boost'\n\nconst chatMessages = gql`\n{\n  messages {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default chatMessages","import { gql } from 'apollo-boost'\n\nconst createMessage = gql`\nmutation createMessage(\n  $content: String!\n  ) {\n  createMessage(\n    content: $content\n  ) {\n    content\n    user {\n      name\n    }\n    created\n    id\n  }\n}\n`\n\nexport default createMessage","import { gql } from 'apollo-boost'\n\nconst messageAdded = gql`\nsubscription {\n  messageAdded {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default messageAdded","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Segment, Comment, Divider } from 'semantic-ui-react'\n\nconst ChatMessage = ({ message, currentUser }) => {\n\n  if (!currentUser.me) {\n    return null\n  }\n  // Defines message color by user\n  const defSegColor = currentUser.me.name === message.user.name\n    ? 'blue'\n    : 'green'\n\n  // Defines float side by user\n  const defFloatSide = currentUser.me.name === message.user.name\n    ? 'left'\n    : 'right'\n\n  const segmentStyle = {\n    margin: '0 0 5px 0',\n    padding: 7,\n    float: `${defFloatSide}`,\n    clear: 'both'\n  }\n\n  return (\n    <Comment\n      data-cy='message'\n      style={{ marginTop: 7, paddingTop: 7, overflow: 'auto' }}>\n      <Segment\n        style={segmentStyle} compact inverted color={defSegColor} secondary>\n        <Comment.Content>\n          <Comment.Author as='a'>\n            {message.user.name}\n          </Comment.Author>\n          <Comment.Metadata>\n            <div>{new Date(parseInt(message.created)).toLocaleString()}</div>\n          </Comment.Metadata>\n          <Divider style={{ margin: '4px 0px 4px 0px' }} />\n          {message.content}\n        </Comment.Content>\n      </Segment>\n    </Comment>\n  )\n}\n\n// Proptypes\nChatMessage.propTypes = {\n  message: PropTypes.object.isRequired,\n  currentUser: PropTypes.object.isRequired\n}\n\nexport default ChatMessage","// Libraries\nimport React, { useState, useRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useQuery, useMutation, useSubscription } from 'react-apollo-hooks'\nimport { Container, Icon, Comment, Menu, Input } from 'semantic-ui-react'\n// TypeDefs\nimport chatMessages from '../graphql/queries/chatMessages'\nimport currentUser from '../graphql/queries/currentUser'\nimport createMessage from '../graphql/mutations/createMessage'\nimport messageAdded from '../graphql/subscriptions/messageAdded'\n// Components\nimport ChatMessage from './ChatMessage'\nimport Loading from './Loading'\n// Helper functions\nimport { includedIn } from '../utilities/helperFuncs'\n\nconst ChatView = ({ show }) => {\n  const { data, loading } = useQuery(chatMessages)\n  const userQuery = useQuery(currentUser)\n  const [messageInput, setMessageInput] = useState('')\n  const addMessage = useMutation(createMessage)\n  const el = useRef(null)\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [show])\n\n\n  // eslint-disable-next-line no-unused-vars\n  const addedMessage = useSubscription(messageAdded, {\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      const messageData = client.readQuery({ query: chatMessages })\n      const addedMessage = subscriptionData.data.messageAdded\n\n      if (!includedIn(messageData.messages, addedMessage.id)) {\n        messageData.messages.push(addedMessage)\n\n        client.writeQuery({\n          query: chatMessages,\n          data: messageData,\n          id: 1\n        })\n        el.current.scrollIntoView({ block: 'end', behavior: 'smooth' })\n      }\n    }\n  })\n\n  const scrollToBottom = () => {\n    if (!el.current) { return }\n    el.current.scrollIntoView({ block: 'end' })\n  }\n\n  const handleSubmit = () => {\n    // Prevents empty messages\n    if (messageInput.length < 1) {\n      return\n    }\n\n    addMessage({\n      variables: {\n        \"content\": messageInput\n      }\n    })\n    setMessageInput('')\n  }\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <div style={{ height: '100%' }}>\n      <Container style={{ height: '90%', overflowY: 'scroll' }}>\n        {\n          loading || userQuery.loading\n            ?\n            <Loading inverted={true}/>\n            :\n            <Comment.Group>\n              {data.messages.map(message => (\n                <ChatMessage\n                  key={message.id}\n                  message={message}\n                  currentUser={userQuery.data}\n                />\n              ))}\n            </Comment.Group>\n        }\n        <div id={'el'} ref={el}></div>\n      </Container>\n\n      <Menu fluid color='grey' style={{ marginBottom: 0, marginTop: 0, height: '10%' }}>\n        <Menu.Item style={{ width: '80vw' }}>\n          <Input\n          data-cy='chat-input'\n            fluid\n            value={messageInput}\n            onChange={({ target }) => setMessageInput(target.value)}\n            onKeyPress={({ key }) => {\n              if (key === 'Enter') {\n                handleSubmit()\n              }\n            }}\n            onFocus={scrollToBottom}\n          />\n        </Menu.Item>\n        <Menu.Item\n          style={{ width: '20vw', justifyContent: 'center' }}\n          onClick={handleSubmit}>\n          <Icon\n            name='send'\n            inverted\n            circular\n            color='green' />\n        </Menu.Item>\n      </Menu>\n    </div>\n  )\n}\n\n// Proptypes\nChatView.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nexport default ChatView\n","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table, Container, Header } from 'semantic-ui-react'\n\nconst AboutView = ({ show }) => {\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Container textAlign='center'>\n      <Header as='h1' style={{ padding: 25 }}>\n        About Kaste 2.0\n      </Header>\n      <Table style={{ background: 'lightgreen' }}>\n        <tbody>\n          <tr>\n            <td>Aim:</td>\n            <td>Design and implement a responsive web app to monitor and water plants.</td>\n          </tr>\n          <tr>\n            <td>Features:</td>\n            <td>\n              <ul>\n                <li>Plantwatering functionality for two or more users</li>\n                <li>Possibility to read plant info through charts</li>\n                <li>Simple chat</li>\n                <li>Rebooting Raspberry (that control sensor data)</li>\n              </ul>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    </Container>\n  )\n}\n\n// Proptypes\nAboutView.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nexport default AboutView","import { gql } from 'apollo-boost'\n\nconst editUserSensorEndpoint = gql`\nmutation editUserSensorEndpoint(\n  $sensorEndpoint: String!\n  ) {\n    editUserSensorEndpoint(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    sensorEndpoint\n    name\n    username\n  }\n}\n`\n\nexport default editUserSensorEndpoint","// Libraries\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Input, Segment, Header, Divider, Message, Grid } from 'semantic-ui-react'\nimport axios from 'axios'\nimport { useMutation } from 'react-apollo-hooks'\n// Custom hooks\nimport { useNotification } from '../hooks/index'\n// TypeDefs\nimport editUserSensorEndpoint from '../graphql/mutations/editUserSensorEndpoint'\n// Helper functions\nimport { handleSensorEndpointUpdateForToken } from '../utilities/helperFuncs'\n\nconst SensorUrlForm = ({ sensorsConnected, token, setToken, actions, sensorService }) => {\n  const [sensorUrlField, setSensorUrlField] = useState('')\n  const [notification, setNotification] = useNotification()\n  const editSensorEndpoint = useMutation(editUserSensorEndpoint)\n\n  const handleConnect = async () => {\n    try {\n      const response = await axios.get(sensorUrlField)\n      const isValidUrl = Object.keys(response.data).includes('sensors')\n\n      if (isValidUrl) {\n        const confirmation = window.confirm('Would you like to receive information about these sensors?')\n\n        if (confirmation) {\n          editSensorEndpoint({\n            variables: {\n              sensorEndpoint: sensorUrlField\n            }\n          })\n\n          // For localstorage\n          handleSensorEndpointUpdateForToken(sensorUrlField, setToken)\n          // For app\n          setSensorUrlField('')\n        }\n      }\n    } catch (error) {\n      setNotification(error.message)\n    }\n  }\n\n  const handleClearUrl = () => {\n    const confirmation = window.confirm('Are you sure? Clearing sensor resource url cuts access to all information and functionality.')\n\n    if (confirmation) {\n      editSensorEndpoint({\n        variables: {\n          sensorEndpoint: ''\n        }\n      })\n\n      handleSensorEndpointUpdateForToken('', setToken)\n    }\n  }\n\n  const handleReboot = async () => {\n    const confirmation = window.confirm('WARNING: Endpoint computer might not recover correctly from reboot!')\n\n    if (confirmation) {\n      await axios.get(actions.reboot)\n\n      sensorService.stopFetching()\n      sensorService.startFetching(token.sensorEndpoint)\n    }\n\n  }\n\n  return (\n    <Segment>\n      <Header>\n        Sensor resource URL\n      </Header>\n      <small style={{ color: 'gray' }}>\n        Provide an endpoint URL where sensor output comes from\n      </small>\n      <Input\n        data-cy='sensor-url-input'\n        value={sensorUrlField}\n        onChange={({ target }) => setSensorUrlField(target.value)}\n        fluid\n        placeholder='Enter URL...'\n        action={\n          <Button\n            data-cy='sensor-url-button'\n            loading={false}\n            onClick={handleConnect}>Connect\n          </Button>\n        }\n      />\n      {\n        token.sensorEndpoint\n          ?\n          <>\n            <Segment color={'green'}>\n              <Header as='h3'>\n                connected at:\n              </Header>\n              {token.sensorEndpoint}\n              <Button\n                fluid\n                style={{ marginTop: 10 }}\n                onClick={handleClearUrl}>\n                clear\n              </Button>\n            </Segment>\n            <Segment\n              inverted\n              secondary\n              color={sensorsConnected ? 'green' : 'red'}>\n              <Grid divided columns={2} textAlign='center'>\n                <Grid.Row verticalAlign='middle'>\n                  <Grid.Column>\n                    Endpoint status: {sensorsConnected ? 'Online' : 'Offline'}\n                  </Grid.Column>\n                  <Grid.Column>\n                    <Button\n                      disabled={!sensorsConnected}\n                      onClick={handleReboot}\n                      icon='redo'\n                      content='Reboot' />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Segment>\n          </>\n          :\n          <Segment color={'red'}>\n            Not connected\n          </Segment>\n      }\n      <Divider />\n      {notification &&\n        <Message color='red'>\n          {notification}\n        </Message>\n      }\n    </Segment>\n  )\n}\n\n// Proptypes\nSensorUrlForm.propTypes = {\n  sensorsConnected: PropTypes.bool.isRequired,\n  token: PropTypes.object.isRequired,\n  setToken: PropTypes.func.isRequired\n}\n\nexport default SensorUrlForm","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Grid } from 'semantic-ui-react'\n// Components\nimport SensorUrlForm from './SensorUrlForm'\n\nconst SettingsView = ({ show, sensorsConnected, token, setToken, actions, sensorService }) => {\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Grid divided='vertically'>\n      <Grid.Row>\n        <Grid.Column>\n          <SensorUrlForm\n            sensorsConnected={sensorsConnected}\n            token={token}\n            actions={actions}\n            sensorService={sensorService}\n            setToken={setToken} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\n// Proptypes\nSettingsView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  sensorsConnected: PropTypes.bool,\n  token: PropTypes.object,\n  setToken: PropTypes.func.isRequired\n}\n\nexport default SettingsView","// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Segment, Button } from 'semantic-ui-react'\n\nconst ImageError = ({ setReloadImage }) => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Icon name='frown' inverted color='grey' size='massive' />\n\n      <Segment\n        color='red'\n        inverted\n        secondary\n        compact>\n        <p style={{ color: 'white' }}>Image failed to load...</p>\n      </Segment>\n\n      <Button\n      data-cy='error-button'\n        circular\n        icon='redo'\n        onClick={async () => {\n          await setReloadImage(true)\n          setReloadImage(false)\n        }}>\n\n\n      </Button>\n    </div>\n  )\n}\n\n// Proptypes\nImageError.propTypes = {\n  setReloadImage: PropTypes.func.isRequired\n}\n\nexport default ImageError","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Image } from 'semantic-ui-react'\n// Components\nimport Loading from './Loading'\nimport ImageError from './ImageError'\n\nconst divStyle = {\n  height: '100%',\n  background: 'black',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}\n\nconst VideoView = ({ show, actions }) => {\n  const [imageStatus, setImageStatus] = useState(<Loading inverted={false}/>)\n  const [displayImage, setDisplayImage] = useState('block')\n  const [reloadImage, setReloadImage] = useState(false)\n\n  useEffect(() => {\n    setImageStatus(<Loading inverted={false}/>)\n    setDisplayImage('block')\n  }, [show, reloadImage])\n\n  if (!show || reloadImage) {\n    return null\n  }\n  return (\n    <div style={divStyle}>\n\n      {imageStatus}\n      {\n        actions\n          ? <Image\n            style={{ maxWidth: 800, display: `${displayImage}` }}\n            centered\n            src={actions.camera}\n            fluid\n            onLoad={() => setImageStatus(null)}\n            onError={() => {\n              setImageStatus(<ImageError setReloadImage={setReloadImage} />)\n              setDisplayImage('none')\n            }}\n          />\n          : null\n      }\n    </div>\n  )\n}\n\n// Proptypes\nVideoView.propTypes = {\n  show: PropTypes.bool.isRequired,\n  actions: PropTypes.object\n}\n\nexport default VideoView","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\n// Custom hooks\nimport { useSensors } from './hooks/index'\n// Components\nimport ResponsiveLayout from './components/ResponsiveLayout'\nimport LoginView from './components/LoginView'\nimport SensorView from './components/SensorView'\nimport ChatView from './components/ChatView'\nimport AboutView from './components/AboutView'\nimport SettingsView from './components/SettingsView'\nimport VideoView from './components/VideoView'\n\nconst App = () => {\n  const [page, setPage] = useState('Settings')\n  const [token, setToken] = useState(JSON.parse(localStorage.getItem('kaste-user-token')))\n  const [sensorData, actions, sensorService, sensorsConnected, sensorError] = useSensors(30) // update interval (in seconds)\n  const client = useApolloClient()\n\n  useEffect(() => {\n    if (token && token.sensorEndpoint) {\n      sensorService.startFetching(token.sensorEndpoint)\n    } else {\n      sensorService.stopFetching()\n    }\n  }, [token])\n\n  const logOut = () => {\n    setPage('Settings')\n    sensorService.stopFetching()\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  return (\n    <>\n      {!token\n        ?\n        <LoginView\n          setToken={setToken} />\n        :\n        <ResponsiveLayout\n          page={page}\n          setPage={setPage}\n          logOut={logOut}\n          actions={actions}\n          token={token}\n          sensorService={sensorService}\n        >\n\n          <SensorView\n            token={token}\n            sensorData={sensorData}\n            sensorError={sensorError}\n            show={page === 'Sensors'}\n          />\n\n          <ChatView\n            show={page === 'Chat'}\n          />\n\n          <AboutView\n            show={page === 'About'}\n          />\n\n          <SettingsView\n            show={page === 'Settings'}\n            sensorsConnected={sensorsConnected}\n            token={token}\n            setToken={setToken}\n            actions={actions}\n            sensorService={sensorService}\n          />\n\n          <VideoView\n            show={page === 'Video'}\n            token={token}\n            actions={actions}\n          />\n        </ResponsiveLayout>\n      }\n    </>\n  )\n}\n\nexport default App;\n\n","//Libraries\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo-hooks'\n// ...Because of authorization for headers (instead of apollo-boost)\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n// ...For Subscriptions (websocket)\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n// Utilities\nimport config from './utilities/config'\n// Components\nimport App from './App'\n\nconst wslink = new WebSocketLink({\n  uri: config.wsUrl,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: config.httpUrl\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = JSON.parse(localStorage.getItem('kaste-user-token'))\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token.value}` : null\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wslink,\n  authLink.concat(httpLink),\n)\n\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'))"],"sourceRoot":""}