{"version":3,"sources":["utilities/config.js","utilities/helperFuncs.js","hooks/index.js","components/MobileContainer.js","components/DesktopContainer.js","components/ResponsiveLayout.js","graphql/mutations/loginUser.js","graphql/queries/currentUser.js","components/LoginView.js","components/SensorValue.js","graphql/queries/chartData.js","components/Loading.js","components/Chart.js","components/PlantSensor.js","components/HouseSensor.js","components/SensorView.js","graphql/queries/chatMessages.js","graphql/mutations/createMessage.js","graphql/subscriptions/messageAdded.js","components/ChatMessage.js","components/ChatView.js","components/AboutView.js","graphql/mutations/editUserSensorEndpoint.js","components/SensorUrlForm.js","components/SettingsView.js","components/ImageError.js","components/VideoView.js","App.js","index.js"],"names":["config","wsUrl","httpUrl","includedIn","set","object","map","p","id","includes","formatSensorData","sensorData","Object","values","reduce","acc","cur","concat","handleSensorEndpointUpdateForToken","sensorUrlField","setToken","prevToken","JSON","parse","localStorage","getItem","removeItem","updatedToken","objectSpread","sensorEndpoint","window","setItem","stringify","useNotification","duration","arguments","length","undefined","_useState3","useState","_useState4","slicedToArray","text","setText","setTimeout","MobileContainer","_ref","children","setPage","logOut","page","actions","token","_useState","_useState2","recentlyWatered","setRecentlyWatered","showSidebar","setShowSidebar","_useState5","_useState6","cameraConnected","setCameraConnected","_useState7","_useState8","raspConnected","setRaspConnected","_useState9","_useState10","wateringConnected","setWateringConnected","handleViewChange","view","console","log","useEffect","camera","reboot","water","react_default","a","createElement","Fragment","Responsive","maxWidth","onlyMobile","as","Sidebar","Pushable","style","height","Menu","animation","inverted","onHide","vertical","visible","icon","width","Header","color","Icon","name","username","Item","onClick","disabled","axios","get","oneMin","error","message","Pusher","dimmed","widths","pointing","size","marginBottom","borderRadius","alignSelf","header","position","DesktopContainer","minWidth","onlyTablet","fixed","ResponsiveLayout","components_MobileContainer","components_DesktopContainer","loginUser","gql","_templateObject","currentUser","currentUser_templateObject","LoginView","login","useMutation","_useNotification","_useNotification2","notification","setNotification","setUsername","password","setPassword","handleLogin","_ref2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","update","client","result","data","variables","refetchQueries","query","t0","graphQLErrors","stop","apply","this","className","Grid","textAlign","background","verticalAlign","Column","dividing","Form","onSubmit","Segment","stacked","raised","Input","type","value","onChange","_ref3","target","fluid","iconPosition","placeholder","_ref4","Button","Message","negative","SensorValue","label","iconColor","fontSize","chartData","chartData_templateObject","Loading","Dimmer","active","Loader","options","layout","padding","bottom","scales","xAxes","ticks","autoSkip","maxTicksLimit","yAxes","min","max","Chart","sensor","chartTimeRange","plantData","useQuery","toUpperCase","range","fetchPolicy","loading","components_Loading","formattedChartData","keys","labels","time","moment","utc","local","format","subtract","fromNow","returnLineColor","measure","datasets","push","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","formatSensorDataIntoChartData","es","legend","display","PlantSensor","chartVisible","setChartVisible","setChartTimeRange","secondary","margin","columns","Row","soil_moisture","components_SensorValue","Math","floor","light","temperature_C","nutrient","circular","components_Chart","Date","now","getTime","battery_low","HouseSensor","location","humidity","SensorView","show","overflowY","components_PlantSensor","key","components_HouseSensor","chatMessages","chatMessages_templateObject","createMessage","createMessage_templateObject","messageAdded","messageAdded_templateObject","ChatMessage","me","defSegColor","user","defFloatSide","segmentStyle","float","clear","Comment","marginTop","paddingTop","overflow","compact","Content","Author","Metadata","parseInt","created","toLocaleString","Divider","content","ChatView","_useQuery","userQuery","messageInput","setMessageInput","el","useRef","scrollToBottom","addMessage","useSubscription","onSubscriptionData","subscriptionData","messageData","readQuery","addedMessage","messages","writeQuery","current","scrollIntoView","block","behavior","handleSubmit","Container","Group","components_ChatMessage","ref","onKeyPress","onFocus","justifyContent","AboutView","Table","editUserSensorEndpoint","editUserSensorEndpoint_templateObject","SensorUrlForm","sensorsConnected","setSensorUrlField","editSensorEndpoint","handleConnect","response","sent","confirm","action","SettingsView","divided","components_SensorUrlForm","ImageError","setReloadImage","divStyle","alignItems","VideoView","imageStatus","setImageStatus","displayImage","setDisplayImage","reloadImage","Image","centered","src","onLoad","onError","components_ImageError","App","_useSensors","setSensorData","setActions","isConnected","setIsConnected","setError","_useState11","_useState12","intervalId","setIntervalId","getSensorData","url","sensors","_x","startFetching","setInterval","stopFetching","clearInterval","useSensors","_useSensors2","sensorService","useApolloClient","components_ResponsiveLayout","resetStore","components_SensorView","components_ChatView","components_AboutView","components_SettingsView","components_VideoView","components_LoginView","wslink","WebSocketLink","uri","reconnect","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0df4af4c.chunk.js","sourcesContent":["let wsUrl = 'ws://localhost:4000/graphql'\nlet httpUrl = 'http://localhost:4000/graphql'\n\nif (process.env.NODE_ENV === 'production') {\n  wsUrl = 'wss://lit-forest-54340.herokuapp.com/graphql'\n  httpUrl = 'https://lit-forest-54340.herokuapp.com/graphql'\n}\n\nexport default { wsUrl, httpUrl }","export const includedIn = (set, object) =>\n  set.map(p => p.id).includes(object.id)\n\n// Sensor data comes in two objects. they need to be merged into one one array\nexport const formatSensorData = (sensorData) => {\n  const values = Object.values(sensorData)\n  const flattenedArray = values.reduce((acc, cur) => cur.concat(acc))\n  return flattenedArray\n}\n\n// Sets new url endpoint to localstorage\nexport const handleSensorEndpointUpdateForToken = (sensorUrlField, setToken) => {\n  const prevToken = JSON.parse(localStorage.getItem('kaste-user-token'))\n  localStorage.removeItem('kaste-user-token')\n\n  const updatedToken = {\n    ...prevToken,\n    sensorEndpoint: sensorUrlField\n  }\n\n  window.localStorage.setItem('kaste-user-token', JSON.stringify(updatedToken))\n  setToken(updatedToken)\n}\n\n\nexport default { includedIn, formatSensorData, handleSensorEndpointUpdateForToken }","// Libraries\nimport axios from 'axios'\nimport { useState, useEffect } from 'react'\n// Helper functions\nimport { formatSensorData } from '../utilities/helperFuncs'\n\nexport const useField = (type) => {\n  const [value, setValue] = useState('')\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  const reset = () => {\n    setValue('')\n  }\n\n  return {\n    type,\n    value,\n    onChange,\n    reset\n  }\n}\n\n// Provide duration as argument (seconds)\nexport const useNotification = (duration = 5) => {\n  const [text, setText] = useState(null)\n\n  const reset = () => setText(null)\n\n  const set = (text) => {\n    setText(text)\n    setTimeout(() => {\n      reset()\n    }, duration * 1000)\n  }\n\n  return [text, set]\n}\n\n// Handle fetching sensorinformation\n// Provide duration as argument (seconds)\nexport const useSensors = (duration = 60) => {\n  const [sensorData, setSensorData] = useState(null)\n  const [actions, setActions] = useState(null)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useNotification(null)\n  const [intervalId, setIntervalId] = useState(null)\n\n  const getSensorData = async (url) => {\n    try {\n      const response = await axios.get(url)\n\n      // Format sensor data with helper function\n      setSensorData(formatSensorData(response.data.sensors))\n      // get actions\n      setActions(response.data.actions)\n      setIsConnected(true)\n    } catch (error) {\n      setIsConnected(false)\n      setError(error)\n    }\n  }\n\n  const startFetching = (url) => {\n    console.log('fetching...')\n    getSensorData(url)\n    const id = setInterval(() => {\n      console.log('fetching...')\n      getSensorData(url)\n    }, duration * 1000);\n    setIntervalId(id)\n  }\n\n  const stopFetching = () => {\n    console.log('IntervalId', intervalId)\n    clearInterval(intervalId)\n    setSensorData(null)\n    setIsConnected(false)\n    setActions(null)\n  }\n\n  const sensorService = {\n    startFetching,\n    stopFetching\n  }\n\n\n  return [sensorData, actions, sensorService, isConnected, error]\n}","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport { Responsive, Sidebar, Menu, Icon } from 'semantic-ui-react'\nimport axios from 'axios'\n\nconst MobileContainer = ({ children, setPage, logOut, page, actions, token }) => {\n  const [recentlyWatered, setRecentlyWatered] = useState(false)\n  const [showSidebar, setShowSidebar] = useState(false)\n  const [cameraConnected, setCameraConnected] = useState(false)\n  const [raspConnected, setRaspConnected] = useState(false)\n  const [wateringConnected, setWateringConnected] = useState(false)\n\n  const handleViewChange = (view) => () => {\n    setShowSidebar(false)\n    setPage(view)\n  }\n\n\n  console.log(actions)\n  \n  // Check if sensor actions include camera, watering or rasp rebooting functionality\n  useEffect(() => {\n    if (actions) {\n      setCameraConnected(actions.camera !== undefined)\n      setRaspConnected(actions.reboot !== undefined)\n      setWateringConnected(actions.water !== undefined)\n    } else {\n      setCameraConnected(false)\n      setRaspConnected(false)\n      setWateringConnected(false)\n    }\n\n  }, [actions])\n\n  const handleWatering = () => {\n    setRecentlyWatered(true)\n    console.log('Watering plants plants')\n    try {\n      axios.get(actions.water.oneMin)\n    } catch (error) {\n      console.error(error.message)\n    }\n    setTimeout(() => {\n      setRecentlyWatered(false)\n      console.log('Watering completed')\n\n    }, 1000 * 60)\n  }\n\n  return (\n    <>\n      <Responsive\n        maxWidth={Responsive.onlyMobile.maxWidth}\n        as={Sidebar.Pushable}\n        style={{ height: '100vh' }}\n      >\n        <Sidebar\n          as={Menu}\n          animation='push'\n          inverted\n          onHide={() => setShowSidebar(false)}\n          vertical\n          visible={showSidebar}\n          icon='labeled'\n          width='thin'\n        >\n        {token &&\n          <Menu.Header as='small' style={{color: 'white'}}>\n            <Icon name='user' color='green'/>\n            {token.username}\n          </Menu.Header>\n        }\n          <Menu.Item onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n          <Menu.Item onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n          <Menu.Item onClick={handleViewChange('Settings')}>\n            <Icon name='settings' />\n            Settings\n          </Menu.Item>\n          <Menu.Item onClick={handleViewChange('About')}>\n            <Icon name='question' />\n            About\n          </Menu.Item>\n          <Menu.Item disabled={!cameraConnected} onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n          <Menu.Item disabled={!wateringConnected || recentlyWatered} onClick={handleWatering}>\n            <Icon name='shower' />\n            Water plants\n          </Menu.Item>\n          <Menu.Item disabled={!raspConnected} onClick={() => console.log('Reboot rasp')}>\n            <Icon name='redo' />\n            Reboot rasp\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher style={{ height: '100%' }} dimmed={showSidebar}>\n\n          <Menu widths={3} inverted pointing color='green' size='large' style={{ height: '50px', marginBottom: 0, borderRadius: 0 }}>\n            <Menu.Item onClick={() => setShowSidebar(true)} style={{ alignSelf: 'center' }}>\n              <Icon name='sidebar' />\n            </Menu.Item>\n            <Menu.Item header={true}>\n              {page}\n            </Menu.Item>\n            <Menu.Item position='right' onClick={() => logOut()} style={{ alignSelf: 'center' }}>\n              <Icon name='log out' />\n            </Menu.Item>\n          </Menu>\n\n          <div style={{ height: 'calc(100vh - 50px)' }}>\n            {children}\n          </div>\n\n        </Sidebar.Pusher>\n      </Responsive>\n    </>\n  )\n}\n\nexport default MobileContainer","// Libraries\nimport React, { useState } from 'react'\nimport { Responsive, Menu, Icon } from 'semantic-ui-react'\n\nconst DesktopContainer = ({ children, setPage, logOut }) => {\n  const [recentlyWatered, setRecentlyWatered] = useState(false)\n\n  // Handles sidebar navigation\n  const handleViewChange = (view) => () => {\n    setPage(view)\n  }\n\n  const handleWatering = () => {\n    setRecentlyWatered(true)\n    console.log('Watering plants plants')\n    setTimeout(() => {\n      setRecentlyWatered(false)\n      console.log('Watering completed')\n\n    }, 5000)\n\n  }\n\n  return (\n    <>\n      <Responsive\n        style={{ height: '100vh' }}\n        minWidth={Responsive.onlyTablet.minWidth}\n      >\n        <Menu\n          style={{ height: 71 }}\n          inverted\n          icon='labeled'\n          color='green'\n          fixed='top'\n        >\n          <Menu.Item onClick={handleViewChange('Sensors')}>\n            <Icon name='info' />\n            Sensors\n          </Menu.Item>\n          <Menu.Item onClick={handleViewChange('Chat')}>\n            <Icon name='comments outline' />\n            Chat\n          </Menu.Item>\n          <Menu.Item disabled={recentlyWatered} onClick={handleWatering}>\n            <Icon name='exclamation' />\n            Water plants\n          </Menu.Item>\n          <Menu.Item onClick={() => console.log('Reboot rasp')}>\n            <Icon name='redo' />\n            Reboot rasp\n          </Menu.Item>\n          <Menu.Item onClick={handleViewChange('Video')}>\n            <Icon name='eye' />\n            Live Feed\n          </Menu.Item>\n          <Menu.Menu position='right'>\n            <Menu.Item onClick={handleViewChange('Settings')}>\n              <Icon name='settings' />\n              Settings\n          </Menu.Item>\n            <Menu.Item onClick={handleViewChange('About')}>\n              <Icon name='question' />\n              About\n          </Menu.Item>\n            <Menu.Item onClick={() => logOut(false)}>\n              <Icon name='log out' />\n              Log out\n          </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n        <div style={{ height: 71 }} />\n        <div style={{ height: 'calc(100vh - 71px)' }}>\n          {children}\n        </div>\n      </Responsive>\n    </>\n  )\n}\n\nexport default DesktopContainer","// Libraries\nimport React from 'react'\n\n// Components\nimport MobileContainer from './MobileContainer'\nimport DesktopContainer from './DesktopContainer'\n\nconst ResponsiveLayout = ({ children, setPage, logOut, page, actions, token }) => {\n\n  return (\n    <>\n      <MobileContainer\n        logOut={logOut}\n        page={page}\n        actions={actions}\n        setPage={setPage}\n        token={token}>\n        {children}\n      </MobileContainer>\n\n      <DesktopContainer\n        logOut={logOut}\n        setPage={setPage}\n        actions={actions}>\n        {children}\n      </DesktopContainer>\n    </>\n  )\n}\n\nexport default ResponsiveLayout","import { gql } from 'apollo-boost'\n\nconst loginUser = gql`\nmutation loginUser(\n  $password: String!\n  $username: String!\n  ) {\n  login(\n    password: $password\n    username: $username\n  ) {\n    value\n    username\n    sensorEndpoint\n  }\n}\n`\n\nexport default loginUser","import { gql } from 'apollo-boost'\n\nconst currentUser = gql`\n{\n  me {\n    name\n    username\n    id\n    sensorEndpoint\n  }\n}\n`\n\nexport default currentUser","// Libraries\nimport React, { useState } from 'react'\nimport { Message, Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\nimport { useMutation } from 'react-apollo-hooks'\n// Typedefs\nimport loginUser from '../graphql/mutations/loginUser'\nimport currentUser from '../graphql/queries/currentUser'\n// Hooks\nimport { useNotification } from '../hooks/index'\n\n\nconst LoginView = ({ setToken }) => {\n  const login = useMutation(loginUser)\n  const [notification, setNotification] = useNotification()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleLogin = async () => {\n    try {\n      await login({\n        update: (client, result) => {\n          const token = result.data.login\n          setToken(token)\n          localStorage.setItem('kaste-user-token', JSON.stringify(token))\n        },\n        variables: {\n          username, password\n        },\n        refetchQueries: [{ query: currentUser }]\n      })\n\n\n    } catch (error) {\n      setNotification(error.graphQLErrors[0].message)\n    }\n  }\n\n  return (\n    <div className='login-form'>\n      <style> {`\n  body > div,\n  body > div > div,\n  body > div > div > div.login-form {\n    height: 100%;\n  }\n          `}\n      </style>\n      <Grid textAlign='center' style={{ height: '100%', background: 'lightgreen' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 250 }}>\n          <Header as='h1' color='grey' dividing textAlign='center'>\n            Log in to Kaste 2.0\n          </Header>\n          <Form size='large' onSubmit={handleLogin}>\n            <Segment stacked raised>\n              <Form.Input\n                type=\"text\"\n                value={username}\n                onChange={({ target }) => setUsername(target.value)}\n                fluid\n                icon='user'\n                iconPosition='left'\n                placeholder='Username'\n              />\n              <Form.Input\n                type=\"password\"\n                value={password}\n                onChange={({ target }) => setPassword(target.value)}\n                fluid\n                icon='lock'\n                iconPosition='left'\n                placeholder='Password'\n              />\n\n              <Button color='brown' size='large' type='submit'>\n                Log in\n              </Button>\n            </Segment>\n            {notification &&\n              <Message negative>\n                {notification}\n              </Message>\n            }\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\nexport default LoginView","// Libraries\nimport React from 'react'\nimport { Icon, List } from 'semantic-ui-react'\n\nconst SensorValue = ({ value, label, icon, iconColor, size }) => {\n  return (\n    <div>\n      <Icon name={icon} size={size} color={iconColor ? iconColor : null} />\n      <span style={{\n        fontSize: `${size === 'big' ? '28px' : '11px'}`,\n        verticalAlign: 'middle'\n      }}>\n        {value}\n      </span>\n    </div>\n  )\n}\n\nexport default SensorValue","import { gql } from 'apollo-boost'\n\nconst chartData = gql`\n  query ChartData($id: Int!, $type: HousePlant!, $range: DayWeekMonthYear!) {\n  chartData(id: $id, type: $type, range: $range) {\n    time\n    light\n    nutrient\n    soilMoisture\n    temperatureC\n    humidity\n  }\n}\n`\n\nexport default chartData","import React from 'react'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nconst Loading = () => (\n    <Dimmer active>\n      <Loader size='massive'>Loading</Loader>\n    </Dimmer>\n)\n\nexport default Loading","// Libraries\nimport React, { useState } from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Line } from 'react-chartjs-2'\nimport moment from 'moment'\n// Type defs\nimport chartData from '../graphql/queries/chartData'\n// Components\nimport Loading from './Loading'\n\nconst formatSensorDataIntoChartData = ({ chartData }) => {\n  \n  const formattedChartData = Object.keys(chartData)\n  .reduce((acc, cur) => {\n    if (cur === '__typename' || chartData[cur] === null) {\n      return acc\n    }\n    \n    if (cur === 'time') {\n      \n      acc.labels = chartData[cur].map(time => {\n        \n        // If sensor data older than 1 day, format differently\n        if (moment() - time > 1000*60*60*24) {\n          \n          return moment.utc(time).local().format('ddd hA')\n        }\n        \n        return moment(time).subtract(3, 'hours').fromNow(true)\n      })\n\n        return acc\n      }\n\n      const returnLineColor = (measure) => {\n        switch (measure) {\n          case 'temperatureC':\n            return 'rgba(250, 64, 61, 0.7)'\n          case 'nutrient':\n            return 'rgba(250, 158, 61, 0.7)'\n          case 'light':\n            return 'rgba(246, 250, 61, 0.7)'\n          case 'humidity':\n            return 'rgba(61, 152, 250, 0.7)'\n          case 'soilMoisture':\n            return 'rgba(61, 152, 250, 0.7)'\n          default: break\n        }\n      }\n\n      acc.datasets.push(\n        {\n          label: cur,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: returnLineColor(cur),\n          borderColor: returnLineColor(cur),\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: returnLineColor(cur),\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: returnLineColor(cur),\n          pointHoverBorderColor: returnLineColor(cur),\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: chartData[cur]\n        }\n\n      )\n\n      return acc\n    }, { labels: [], datasets: [] })\n\n  console.log('formattedChartData', formattedChartData)\n\n  return formattedChartData\n}\n\nconst options = {\n  layout: {\n    padding: {\n      bottom: -20\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 5\n        }\n      }\n    ],\n    yAxes: [\n      {\n        ticks: {\n        min: 0,\n        max: 100\n        }\n      }\n    ]\n  }\n}\n\nconst Chart = ({ sensor, chartTimeRange }) => {\n  const plantData = useQuery(chartData, {\n    variables: { id: sensor.id, type: sensor.type.toUpperCase(), range: chartTimeRange },\n    fetchPolicy: 'no-cache'\n  })\n\n  if (plantData.loading) {\n    return <Loading />\n  }\n\n  const formattedChartData = formatSensorDataIntoChartData(plantData.data)\n\n  return (\n    <Line data={formattedChartData} options={options} legend={{ display: false }} />\n  )\n}\n\nexport default Chart","// Libraries\nimport React, { useState } from 'react'\nimport { Grid, Button, Header, Segment, Icon } from 'semantic-ui-react'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n\nconst PlantSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n\n  return (\n    <Segment\n      color='green'\n      inverted\n      secondary\n      style={{ margin: '2px 1px' }}>\n\n\n      <Header textAlign='center' as='h3'>\n        <Icon name='leaf' size='large' />\n        Capsicum baccatum\n      </Header>\n\n      <Grid textAlign='center' columns={2} >\n        <Grid.Row>\n\n          <Grid.Column color={sensor.soil_moisture < 10 ? 'yellow' : null}>\n            <SensorValue\n              size={'big'}\n              value={sensor.soil_moisture + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={Math.floor(sensor.light) + ' %'}\n              label={'Light'}\n              icon={'sun'}\n              iconColor={'yellow'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={Math.floor(sensor.nutrient) + ' %'}\n              label={'Nutrient'}\n              icon={'pills'}\n              iconColor={'orange'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button circular icon={chartVisible ? 'close' : 'chart area'} onClick={() => setChartVisible(!chartVisible)} />\n            {\n              chartVisible &&\n              <>\n                <Button circular onClick={() => setChartTimeRange('DAY')}>D</Button>\n                <Button circular onClick={() => setChartTimeRange('WEEK')}>W</Button>\n                <Button circular onClick={() => setChartTimeRange('MONTH')}>M</Button>\n                <Button circular onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n              </>\n            }\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={1} style={{ padding: `${chartVisible ? '5px' : '0px'}` }}>\n\n          <Grid.Column style={{ padding: 0 }}>\n            <Segment\n              style={{\n                display: `${chartVisible ? 'block' : 'none'}`,\n                padding: 5,\n              }}\n            >\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange} />\n            </Segment>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n            <SensorValue\n              value={sensor.time}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={Date.now() - new Date(sensor.time).getTime() > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              value={sensor.battery_low + ' %'}\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low < 30 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  )\n}\n\nexport default PlantSensor","// Libraries\nimport React, { useState } from 'react'\nimport { Segment, Grid, Header, Icon, Button } from 'semantic-ui-react'\n// Components\nimport SensorValue from './SensorValue'\nimport Chart from './Chart'\n\nconst HouseSensor = ({ sensor }) => {\n  const [chartVisible, setChartVisible] = useState(false)\n  const [chartTimeRange, setChartTimeRange] = useState('DAY')\n\n  return (\n    <Segment inverted secondary style={{ margin: '2px 1px', background: 'beige', color: 'black' }}>\n\n\n      <Header style={{ color: 'black' }} textAlign='center' as='h3'>\n        <Icon name='home' color='black' size='large' />\n        {sensor.location}\n      </Header>\n\n      <Grid textAlign='center' columns={2} >\n        <Grid.Row>\n\n          <Grid.Column color={sensor.soil_moisture < 30 ? 'yellow' : null}>\n            <SensorValue\n              size={'big'}\n              value={sensor.humidity + ' %'}\n              label={'Soil moisture'}\n              icon='theme'\n              iconColor={'blue'}\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <SensorValue\n              size={'big'}\n              value={sensor.temperature_C + ' ºC'}\n              label={'Temperature'}\n              icon={'thermometer'}\n              iconColor={'red'}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n\n        <Grid.Row columns='1' style={{ padding: 0 }}>\n\n          <Grid.Column textAlign='center'>\n            <Button circular icon={chartVisible ? 'close' : 'chart area'} onClick={() => setChartVisible(!chartVisible)} />\n            {\n              chartVisible &&\n              <>\n                <Button circular onClick={() => setChartTimeRange('DAY')}>D</Button>\n                <Button circular onClick={() => setChartTimeRange('WEEK')}>W</Button>\n                <Button circular onClick={() => setChartTimeRange('MONTH')}>M</Button>\n                <Button circular onClick={() => setChartTimeRange('YEAR')}>Y</Button>\n              </>\n            }\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={1} style={{ padding: `${chartVisible ? '5px' : '0px'}` }}>\n\n          <Grid.Column style={{ padding: 0 }}>\n            <Segment\n              style={{\n                display: `${chartVisible ? 'block' : 'none'}`,\n                padding: 5,\n              }}\n            >\n              <Chart\n                sensor={sensor}\n                chartTimeRange={chartTimeRange} />\n            </Segment>\n          </Grid.Column>\n\n        </Grid.Row>\n        <Grid.Row columns={2} style={{ padding: 5 }}>\n\n          <Grid.Column textAlign='left'>\n            <SensorValue\n              value={sensor.time}\n              label={'Updated'}\n              size={'small'}\n              icon={'time'}\n              iconColor={Date.now() - new Date(sensor.time).getTime() > 1000 * 60 * 60 ? 'red' : null}\n            />\n          </Grid.Column>\n\n          <Grid.Column textAlign='right'>\n            <SensorValue\n              label={'Battery'}\n              size={'small'}\n              icon={'battery full'}\n              iconColor={sensor.battery_low === 1 ? 'red' : null}\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n      </Grid>\n\n    </Segment>\n  )\n}\n\nexport default HouseSensor","// Libraries\nimport React, { useEffect } from 'react'\nimport { Header } from 'semantic-ui-react'\n// Components\nimport PlantSensor from './PlantSensor'\nimport HouseSensor from './HouseSensor'\n\nconst SensorView = ({ show, sensorData }) => {\n\n  if (!show) {\n    return null\n  }\n\n  const sensors = () =>\n    sensorData\n      ? sensorData.map(sensor =>\n        sensor.type === 'plant'\n          ? <PlantSensor key={sensor.id} sensor={sensor} />\n          : <HouseSensor key={sensor.id} sensor={sensor} />)\n      : null\n\n\n  return (\n    <div style={{ height: '100%', overflowY: 'scroll' }}>\n\n      {sensors()}\n\n    </div>\n  )\n}\n\nexport default SensorView","import { gql } from 'apollo-boost'\n\nconst chatMessages = gql`\n{\n  messages {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default chatMessages","import { gql } from 'apollo-boost'\n\nconst createMessage = gql`\nmutation createMessage(\n  $content: String!\n  ) {\n  createMessage(\n    content: $content\n  ) {\n    content\n    user {\n      name\n    }\n    created\n    id\n  }\n}\n`\n\nexport default createMessage","import { gql } from 'apollo-boost'\n\nconst messageAdded = gql`\nsubscription {\n  messageAdded {\n    content\n    created\n    id\n    user {\n      name\n    }\n  }\n}\n`\n\nexport default messageAdded","// Libraries\nimport React from 'react'\nimport { Segment, Comment, Divider } from 'semantic-ui-react'\n\nconst ChatMessage = ({ message, currentUser }) => {\n\n  if (!currentUser.me) {\n    return null\n  }\n  // Defines message color by user\n  const defSegColor = currentUser.me.name === message.user.name\n    ? 'blue'\n    : 'green'\n\n  // Defines float side by user\n  const defFloatSide = currentUser.me.name === message.user.name\n    ? 'left'\n    : 'right'\n\n  const segmentStyle = {\n    margin: '0 0 5px 0',\n    padding: 7,\n    float: `${defFloatSide}`,\n    clear: 'both'\n  }\n\n  return (\n    < Comment style={{ marginTop: 7, paddingTop: 7, overflow: 'auto' }}>\n        <Segment\n          style={segmentStyle} compact inverted color={defSegColor} secondary>\n          <Comment.Content>\n            <Comment.Author as='a'>\n              {message.user.name}\n            </Comment.Author>\n            <Comment.Metadata>\n              <div>{new Date(parseInt(message.created)).toLocaleString()}</div>\n            </Comment.Metadata>\n            <Divider style={{ margin: '4px 0px 4px 0px' }} />\n            {message.content}\n          </Comment.Content>\n        </Segment>\n    </Comment >\n  )\n}\n\n\nexport default ChatMessage","// Libraries\nimport React, { useState, useRef, useEffect } from 'react'\nimport { useQuery, useMutation, useSubscription } from 'react-apollo-hooks'\nimport { Container, Icon, Comment, Menu, Input } from 'semantic-ui-react'\n// TypeDefs\nimport chatMessages from '../graphql/queries/chatMessages'\nimport currentUser from '../graphql/queries/currentUser'\nimport createMessage from '../graphql/mutations/createMessage'\nimport messageAdded from '../graphql/subscriptions/messageAdded'\n// Components\nimport ChatMessage from './ChatMessage'\nimport Loading from './Loading'\n// Helper functions\nimport { includedIn } from '../utilities/helperFuncs'\n\nconst ChatView = ({ show }) => {\n  const { data, loading } = useQuery(chatMessages)\n  const userQuery = useQuery(currentUser)\n  const [messageInput, setMessageInput] = useState('')\n  const el = useRef(null)\n  \n  useEffect(() => {\n    scrollToBottom()\n  }, [show])\n\n  const addMessage = useMutation(createMessage)\n\n  // eslint-disable-next-line no-unused-vars\n  const addedMessage = useSubscription(messageAdded, {\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      const messageData = client.readQuery({ query: chatMessages })\n      const addedMessage = subscriptionData.data.messageAdded\n\n      if (!includedIn(messageData.messages, addedMessage.id)) {\n        messageData.messages.push(addedMessage)\n\n        client.writeQuery({\n          query: chatMessages,\n          data: messageData,\n          id: 1\n        })\n        el.current.scrollIntoView({ block: 'end', behavior: 'smooth' })\n      }\n    }\n  })\n\n  const scrollToBottom = () => {\n    if (!el.current) { return }\n    el.current.scrollIntoView({ block: 'end', behavior: 'smooth' })\n  }\n\n  const handleSubmit = () => {\n    // Prevents empty messages\n    if (messageInput.length < 1) {\n      return\n    }\n\n    addMessage({\n      variables: {\n        \"content\": messageInput\n      }\n    })\n    setMessageInput('')\n  }\n\n  if (!show) {\n    return null\n  }\n  return (\n    <div style={{ height: '100%' }}>\n      <Container style={{ height: '90%', overflowY: 'scroll' }}>\n        {\n          loading || userQuery.loading\n            ?\n            <Loading />\n            :\n            <Comment.Group>\n              {data.messages.map(message => (\n                <ChatMessage\n                  key={message.id}\n                  message={message}\n                  currentUser={userQuery.data}\n                />\n              ))}\n            </Comment.Group>\n        }\n        <div id={'el'} ref={el}></div>\n      </Container>\n\n      <Menu fluid color='grey' style={{ marginBottom: 0, marginTop: 0, height: '10%' }}>\n        <Menu.Item style={{ width: '80vw' }}>\n          <Input\n            fluid\n            value={messageInput}\n            onChange={({ target }) => setMessageInput(target.value)}\n            onKeyPress={({ key }) => {\n              if (key === 'Enter') {\n                handleSubmit()\n              }\n            }}\n            onFocus={scrollToBottom}\n          />\n        </Menu.Item>\n        <Menu.Item\n          style={{ width: '20vw', justifyContent: 'center' }}\n          onClick={handleSubmit}>\n          <Icon\n            name='send'\n            inverted\n            circular\n            color='green' />\n        </Menu.Item>\n      </Menu>\n    </div>\n  )\n}\n\nexport default ChatView\n","// Libraries\nimport React from 'react'\nimport { Table, Container, Header } from 'semantic-ui-react'\n\nconst AboutView = ({ show }) => {\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Container textAlign='center'>\n      <Header as='h1' style={{ padding: 25 }}>\n        About Kaste 2.0\n      </Header>\n      <Table style={{ background: 'lightgreen' }}>\n        <tbody>\n          <tr>\n            <td>Aim:</td>\n            <td>Design and implement a responsive web app to monitor and water plants.</td>\n          </tr>\n          <tr>\n            <td>Features:</td>\n            <td>\n              <ul>\n                <li>Plantwatering functionality for two or more users</li>\n                <li>Possibility to read plant info through charts</li>\n                <li>Simple chat</li>\n                <li>Rebooting Raspberry (that controls sensor data)</li>\n              </ul>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    </Container>\n  )\n}\n\nexport default AboutView","import { gql } from 'apollo-boost'\n\nconst editUserSensorEndpoint = gql`\nmutation editUserSensorEndpoint(\n  $sensorEndpoint: String!\n  ) {\n    editUserSensorEndpoint(\n    sensorEndpoint: $sensorEndpoint\n  ) {\n    sensorEndpoint\n    name\n    username\n  }\n}\n`\n\nexport default editUserSensorEndpoint","// Libraries\nimport React, { useState } from 'react'\nimport { Button, Input, Segment, Header, Divider, Message } from 'semantic-ui-react'\nimport axios from 'axios'\nimport { useMutation } from 'react-apollo-hooks'\n// Custom hooks\nimport { useNotification } from '../hooks/index'\n// TypeDefs\nimport editUserSensorEndpoint from '../graphql/mutations/editUserSensorEndpoint'\n// Helper functions\nimport { handleSensorEndpointUpdateForToken } from '../utilities/helperFuncs'\n\nconst SensorUrlForm = ({ sensorsConnected, token, setToken }) => {\n  const [sensorUrlField, setSensorUrlField] = useState('')\n  const [notification, setNotification] = useNotification()\n  const editSensorEndpoint = useMutation(editUserSensorEndpoint)\n\n  const handleConnect = async () => {\n    try {\n      const response = await axios.get(sensorUrlField)\n      const isValidUrl = Object.keys(response.data).includes('sensors')\n\n      if (isValidUrl) {\n        const confirmation = window.confirm('Would you like to receive information about these sensors?')\n\n        if (confirmation) {\n          editSensorEndpoint({\n            variables: {\n              sensorEndpoint: sensorUrlField\n            }\n          })\n\n          // For localstorage\n          handleSensorEndpointUpdateForToken(sensorUrlField, setToken)\n          // For app\n          \n          setSensorUrlField('')\n        }\n      }\n    } catch (error) {\n      setNotification(error.message)\n    }\n  }\n\n  const handleClearUrl = () => {\n    const confirmation = window.confirm('Are you sure? Clearing sensor resource url cuts access to all information and functionality.')\n\n    if (confirmation) {\n      editSensorEndpoint({\n        variables: {\n          sensorEndpoint: ''\n        }\n      })\n\n      handleSensorEndpointUpdateForToken('', setToken)\n    }\n  }\n\n  return (\n    <Segment>\n      <Header>\n        Sensor resource URL\n       </Header>\n      <small style={{ color: 'gray' }}>\n        Provide an endpoint URL where sensor output comes from\n       </small>\n      <Input\n        value={sensorUrlField}\n        onChange={({ target }) => setSensorUrlField(target.value)}\n        fluid\n        placeholder='Enter URL...'\n        action={\n          <Button loading={false} onClick={handleConnect}>connect</Button>\n        }\n      />\n      {\n        sensorsConnected\n          ?\n          <Segment color={'green'}>\n            <Header as='h3'>\n              connected at:\n              </Header>\n            {token.sensorEndpoint}\n            <Button\n              fluid\n              style={{ marginTop: 10 }}\n              onClick={handleClearUrl}>\n              clear\n            </Button>\n          </Segment>\n          :\n          <Segment color={'red'}>\n            not connected\n          </Segment>\n      }\n      <Divider />\n      {notification &&\n        <Message color='red'>\n          {notification}\n        </Message>\n      }\n    </Segment>\n  )\n}\n\nexport default SensorUrlForm","// Libraries\nimport React from 'react'\nimport { Grid } from 'semantic-ui-react'\n// Components\nimport SensorUrlForm from './SensorUrlForm'\n\nconst SettingsView = ({ show, sensorsConnected, token, setToken }) => {\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Grid divided='vertically'>\n      <Grid.Row>\n        <Grid.Column>\n          <SensorUrlForm\n          sensorsConnected={sensorsConnected}\n          token={token}\n          setToken={setToken}/>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\nexport default SettingsView","// Libraries\nimport React from 'react'\nimport { Icon, Segment, Button } from 'semantic-ui-react'\n\nconst ImageError = ({ setReloadImage }) => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Icon name='frown' inverted color='grey' size='massive' />\n\n      <Segment\n        color='red'\n        inverted\n        secondary\n        compact>\n        <p style={{ color: 'white' }}>Image failed to load...</p>\n      </Segment>\n\n      <Button\n        circular\n        icon='redo'\n        onClick={async () => {\n          await setReloadImage(true)\n          setReloadImage(false)\n        }}>\n\n\n      </Button>\n    </div>\n  )\n}\nexport default ImageError","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport { Image } from 'semantic-ui-react'\n// Components\nimport Loading from './Loading'\nimport ImageError from './ImageError'\n\nconst divStyle = {\n  height: '100%',\n  background: 'black',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}\n\nconst VideoView = ({ show, actions }) => {\n  const [imageStatus, setImageStatus] = useState(<Loading />)\n  const [displayImage, setDisplayImage] = useState('block')\n  const [reloadImage, setReloadImage] = useState(false)\n\n  useEffect(() => {\n    setImageStatus(<Loading />)\n    setDisplayImage('block')\n  }, [show, reloadImage])\n\n  if (!show || reloadImage) {\n    return null\n  }\n  return (\n    <div style={divStyle}>\n\n      {imageStatus}\n      {\n        actions\n          ? <Image\n            style={{ maxWidth: 800, display: `${displayImage}` }}\n            centered\n            src={actions.camera}\n            fluid\n            onLoad={() => setImageStatus(null)}\n            onError={() => {\n              setImageStatus(<ImageError setReloadImage={setReloadImage} />)\n              setDisplayImage('none')\n            }}\n          />\n          : null\n      }\n    </div>\n  )\n}\n\nexport default VideoView","// Libraries\nimport React, { useState, useEffect } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\n// Custom hooks\nimport { useSensors } from './hooks/index'\n// Components\nimport ResponsiveLayout from './components/ResponsiveLayout'\nimport LoginView from './components/LoginView'\nimport SensorView from './components/SensorView'\nimport ChatView from './components/ChatView'\nimport AboutView from './components/AboutView'\nimport SettingsView from './components/SettingsView'\nimport VideoView from './components/VideoView'\n\nconst App = () => {\n  const [page, setPage] = useState('Sensors')\n  const [token, setToken] = useState(JSON.parse(localStorage.getItem('kaste-user-token')))\n  const [sensorData, actions, sensorService, sensorsConnected, sensorError] = useSensors(60)\n  const client = useApolloClient()\n\n  useEffect(() => {\n    if (token && token.sensorEndpoint) {\n      sensorService.startFetching(token.sensorEndpoint)\n    } else {\n      sensorService.stopFetching()\n    }\n  }, [token])\n\n  const logOut = () => {\n    setPage('Settings')\n    sensorService.stopFetching()\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  return (\n    <>\n      {!token\n        ?\n        <LoginView\n          setToken={setToken} />\n        :\n        <ResponsiveLayout\n          page={page}\n          setPage={setPage}\n          logOut={logOut}\n          actions={actions}\n          token={token}\n        >\n\n          <SensorView\n            sensorData={sensorData}\n            show={page === 'Sensors'}\n          />\n\n          <ChatView\n            show={page === 'Chat'}\n          />\n\n          <AboutView\n            show={page === 'About'}\n          />\n\n          <SettingsView\n            show={page === 'Settings'}\n            sensorsConnected={sensorsConnected}\n            token={token}\n            setToken={setToken}\n          />\n\n          <VideoView\n            show={page === 'Video'}\n            token={token}\n            actions={actions}\n          />\n        </ResponsiveLayout>\n      }\n    </>\n  )\n}\n\nexport default App;\n\n","//Libraries\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo-hooks'\n// ...Because of authorization for headers (instead of apollo-boost)\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n// ...For Subscriptions (websocket)\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n// Utilities\nimport config from './utilities/config'\n// Components\nimport App from './App'\n\nconst wslink = new WebSocketLink({\n  uri: config.wsUrl,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: config.httpUrl\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = JSON.parse(localStorage.getItem('kaste-user-token'))\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token.value}` : null\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wslink,\n  authLink.concat(httpLink),\n)\n\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'))"],"sourceRoot":""}